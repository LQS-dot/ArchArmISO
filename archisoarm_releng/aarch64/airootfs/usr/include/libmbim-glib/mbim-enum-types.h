
/* This file is generated by glib-mkenums, do not modify it. This code is licensed under the same license as the containing project. Note that it links to GLib, so must comply with the LGPL linking clauses. */

#ifndef __LIBMBIM_GLIB_ENUM_TYPES_H__
#define __LIBMBIM_GLIB_ENUM_TYPES_H__
#include "mbim-uuid.h"
#include "mbim-cid.h"
#include "mbim-message.h"
#include "mbim-enums.h"
#include "mbim-tlv.h"

#include <glib-object.h>

G_BEGIN_DECLS

/* enumerations from "../libmbim/src/libmbim-glib/mbim-cid.h" */
GType mbim_cid_basic_connect_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CID_BASIC_CONNECT (mbim_cid_basic_connect_get_type ())

/* Define type-specific symbols */
#define __MBIM_CID_BASIC_CONNECT_IS_ENUM__

#if defined __MBIM_CID_BASIC_CONNECT_IS_ENUM__
/**
 * mbim_cid_basic_connect_get_string:
 * @val: a MbimCidBasicConnect.
 *
 * Gets the nickname string for the #MbimCidBasicConnect specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_cid_basic_connect_get_string (MbimCidBasicConnect val);
#endif

#if defined __MBIM_CID_BASIC_CONNECT_IS_FLAGS__
/**
 * mbim_cid_basic_connect_build_string_from_mask:
 * @mask: bitmask of MbimCidBasicConnect values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimCidBasicConnect in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_cid_basic_connect_build_string_from_mask (MbimCidBasicConnect mask);
#endif
GType mbim_cid_sms_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CID_SMS (mbim_cid_sms_get_type ())

/* Define type-specific symbols */
#define __MBIM_CID_SMS_IS_ENUM__

#if defined __MBIM_CID_SMS_IS_ENUM__
/**
 * mbim_cid_sms_get_string:
 * @val: a MbimCidSms.
 *
 * Gets the nickname string for the #MbimCidSms specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_cid_sms_get_string (MbimCidSms val);
#endif

#if defined __MBIM_CID_SMS_IS_FLAGS__
/**
 * mbim_cid_sms_build_string_from_mask:
 * @mask: bitmask of MbimCidSms values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimCidSms in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_cid_sms_build_string_from_mask (MbimCidSms mask);
#endif
GType mbim_cid_ussd_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CID_USSD (mbim_cid_ussd_get_type ())

/* Define type-specific symbols */
#define __MBIM_CID_USSD_IS_ENUM__

#if defined __MBIM_CID_USSD_IS_ENUM__
/**
 * mbim_cid_ussd_get_string:
 * @val: a MbimCidUssd.
 *
 * Gets the nickname string for the #MbimCidUssd specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_cid_ussd_get_string (MbimCidUssd val);
#endif

#if defined __MBIM_CID_USSD_IS_FLAGS__
/**
 * mbim_cid_ussd_build_string_from_mask:
 * @mask: bitmask of MbimCidUssd values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimCidUssd in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_cid_ussd_build_string_from_mask (MbimCidUssd mask);
#endif
GType mbim_cid_phonebook_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CID_PHONEBOOK (mbim_cid_phonebook_get_type ())

/* Define type-specific symbols */
#define __MBIM_CID_PHONEBOOK_IS_ENUM__

#if defined __MBIM_CID_PHONEBOOK_IS_ENUM__
/**
 * mbim_cid_phonebook_get_string:
 * @val: a MbimCidPhonebook.
 *
 * Gets the nickname string for the #MbimCidPhonebook specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_cid_phonebook_get_string (MbimCidPhonebook val);
#endif

#if defined __MBIM_CID_PHONEBOOK_IS_FLAGS__
/**
 * mbim_cid_phonebook_build_string_from_mask:
 * @mask: bitmask of MbimCidPhonebook values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimCidPhonebook in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_cid_phonebook_build_string_from_mask (MbimCidPhonebook mask);
#endif
GType mbim_cid_stk_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CID_STK (mbim_cid_stk_get_type ())

/* Define type-specific symbols */
#define __MBIM_CID_STK_IS_ENUM__

#if defined __MBIM_CID_STK_IS_ENUM__
/**
 * mbim_cid_stk_get_string:
 * @val: a MbimCidStk.
 *
 * Gets the nickname string for the #MbimCidStk specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_cid_stk_get_string (MbimCidStk val);
#endif

#if defined __MBIM_CID_STK_IS_FLAGS__
/**
 * mbim_cid_stk_build_string_from_mask:
 * @mask: bitmask of MbimCidStk values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimCidStk in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_cid_stk_build_string_from_mask (MbimCidStk mask);
#endif
GType mbim_cid_auth_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CID_AUTH (mbim_cid_auth_get_type ())

/* Define type-specific symbols */
#define __MBIM_CID_AUTH_IS_ENUM__

#if defined __MBIM_CID_AUTH_IS_ENUM__
/**
 * mbim_cid_auth_get_string:
 * @val: a MbimCidAuth.
 *
 * Gets the nickname string for the #MbimCidAuth specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_cid_auth_get_string (MbimCidAuth val);
#endif

#if defined __MBIM_CID_AUTH_IS_FLAGS__
/**
 * mbim_cid_auth_build_string_from_mask:
 * @mask: bitmask of MbimCidAuth values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimCidAuth in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_cid_auth_build_string_from_mask (MbimCidAuth mask);
#endif
GType mbim_cid_dss_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CID_DSS (mbim_cid_dss_get_type ())

/* Define type-specific symbols */
#define __MBIM_CID_DSS_IS_ENUM__

#if defined __MBIM_CID_DSS_IS_ENUM__
/**
 * mbim_cid_dss_get_string:
 * @val: a MbimCidDss.
 *
 * Gets the nickname string for the #MbimCidDss specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_cid_dss_get_string (MbimCidDss val);
#endif

#if defined __MBIM_CID_DSS_IS_FLAGS__
/**
 * mbim_cid_dss_build_string_from_mask:
 * @mask: bitmask of MbimCidDss values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimCidDss in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_cid_dss_build_string_from_mask (MbimCidDss mask);
#endif
GType mbim_cid_ms_firmware_id_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CID_MS_FIRMWARE_ID (mbim_cid_ms_firmware_id_get_type ())

/* Define type-specific symbols */
#define __MBIM_CID_MS_FIRMWARE_ID_IS_ENUM__

#if defined __MBIM_CID_MS_FIRMWARE_ID_IS_ENUM__
/**
 * mbim_cid_ms_firmware_id_get_string:
 * @val: a MbimCidMsFirmwareId.
 *
 * Gets the nickname string for the #MbimCidMsFirmwareId specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_cid_ms_firmware_id_get_string (MbimCidMsFirmwareId val);
#endif

#if defined __MBIM_CID_MS_FIRMWARE_ID_IS_FLAGS__
/**
 * mbim_cid_ms_firmware_id_build_string_from_mask:
 * @mask: bitmask of MbimCidMsFirmwareId values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimCidMsFirmwareId in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_cid_ms_firmware_id_build_string_from_mask (MbimCidMsFirmwareId mask);
#endif
GType mbim_cid_ms_host_shutdown_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CID_MS_HOST_SHUTDOWN (mbim_cid_ms_host_shutdown_get_type ())

/* Define type-specific symbols */
#define __MBIM_CID_MS_HOST_SHUTDOWN_IS_ENUM__

#if defined __MBIM_CID_MS_HOST_SHUTDOWN_IS_ENUM__
/**
 * mbim_cid_ms_host_shutdown_get_string:
 * @val: a MbimCidMsHostShutdown.
 *
 * Gets the nickname string for the #MbimCidMsHostShutdown specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.8
 */
const gchar *mbim_cid_ms_host_shutdown_get_string (MbimCidMsHostShutdown val);
#endif

#if defined __MBIM_CID_MS_HOST_SHUTDOWN_IS_FLAGS__
/**
 * mbim_cid_ms_host_shutdown_build_string_from_mask:
 * @mask: bitmask of MbimCidMsHostShutdown values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimCidMsHostShutdown in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.8
 */
gchar *mbim_cid_ms_host_shutdown_build_string_from_mask (MbimCidMsHostShutdown mask);
#endif
GType mbim_cid_ms_sar_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CID_MS_SAR (mbim_cid_ms_sar_get_type ())

/* Define type-specific symbols */
#define __MBIM_CID_MS_SAR_IS_ENUM__

#if defined __MBIM_CID_MS_SAR_IS_ENUM__
/**
 * mbim_cid_ms_sar_get_string:
 * @val: a MbimCidMsSar.
 *
 * Gets the nickname string for the #MbimCidMsSar specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.26
 */
const gchar *mbim_cid_ms_sar_get_string (MbimCidMsSar val);
#endif

#if defined __MBIM_CID_MS_SAR_IS_FLAGS__
/**
 * mbim_cid_ms_sar_build_string_from_mask:
 * @mask: bitmask of MbimCidMsSar values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimCidMsSar in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.26
 */
gchar *mbim_cid_ms_sar_build_string_from_mask (MbimCidMsSar mask);
#endif
GType mbim_cid_proxy_control_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CID_PROXY_CONTROL (mbim_cid_proxy_control_get_type ())

/* Define type-specific symbols */
#define __MBIM_CID_PROXY_CONTROL_IS_ENUM__

#if defined __MBIM_CID_PROXY_CONTROL_IS_ENUM__
/**
 * mbim_cid_proxy_control_get_string:
 * @val: a MbimCidProxyControl.
 *
 * Gets the nickname string for the #MbimCidProxyControl specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.10
 */
const gchar *mbim_cid_proxy_control_get_string (MbimCidProxyControl val);
#endif

#if defined __MBIM_CID_PROXY_CONTROL_IS_FLAGS__
/**
 * mbim_cid_proxy_control_build_string_from_mask:
 * @mask: bitmask of MbimCidProxyControl values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimCidProxyControl in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.10
 */
gchar *mbim_cid_proxy_control_build_string_from_mask (MbimCidProxyControl mask);
#endif
GType mbim_cid_qmi_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CID_QMI (mbim_cid_qmi_get_type ())

/* Define type-specific symbols */
#define __MBIM_CID_QMI_IS_ENUM__

#if defined __MBIM_CID_QMI_IS_ENUM__
/**
 * mbim_cid_qmi_get_string:
 * @val: a MbimCidQmi.
 *
 * Gets the nickname string for the #MbimCidQmi specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.14
 */
const gchar *mbim_cid_qmi_get_string (MbimCidQmi val);
#endif

#if defined __MBIM_CID_QMI_IS_FLAGS__
/**
 * mbim_cid_qmi_build_string_from_mask:
 * @mask: bitmask of MbimCidQmi values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimCidQmi in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.14
 */
gchar *mbim_cid_qmi_build_string_from_mask (MbimCidQmi mask);
#endif
GType mbim_cid_atds_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CID_ATDS (mbim_cid_atds_get_type ())

/* Define type-specific symbols */
#define __MBIM_CID_ATDS_IS_ENUM__

#if defined __MBIM_CID_ATDS_IS_ENUM__
/**
 * mbim_cid_atds_get_string:
 * @val: a MbimCidAtds.
 *
 * Gets the nickname string for the #MbimCidAtds specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.16
 */
const gchar *mbim_cid_atds_get_string (MbimCidAtds val);
#endif

#if defined __MBIM_CID_ATDS_IS_FLAGS__
/**
 * mbim_cid_atds_build_string_from_mask:
 * @mask: bitmask of MbimCidAtds values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimCidAtds in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.16
 */
gchar *mbim_cid_atds_build_string_from_mask (MbimCidAtds mask);
#endif
GType mbim_cid_intel_firmware_update_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CID_INTEL_FIRMWARE_UPDATE (mbim_cid_intel_firmware_update_get_type ())

/* Define type-specific symbols */
#define __MBIM_CID_INTEL_FIRMWARE_UPDATE_IS_ENUM__

#if defined __MBIM_CID_INTEL_FIRMWARE_UPDATE_IS_ENUM__
/**
 * mbim_cid_intel_firmware_update_get_string:
 * @val: a MbimCidIntelFirmwareUpdate.
 *
 * Gets the nickname string for the #MbimCidIntelFirmwareUpdate specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.16
 */
const gchar *mbim_cid_intel_firmware_update_get_string (MbimCidIntelFirmwareUpdate val);
#endif

#if defined __MBIM_CID_INTEL_FIRMWARE_UPDATE_IS_FLAGS__
/**
 * mbim_cid_intel_firmware_update_build_string_from_mask:
 * @mask: bitmask of MbimCidIntelFirmwareUpdate values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimCidIntelFirmwareUpdate in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.16
 */
gchar *mbim_cid_intel_firmware_update_build_string_from_mask (MbimCidIntelFirmwareUpdate mask);
#endif
GType mbim_cid_qdu_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CID_QDU (mbim_cid_qdu_get_type ())

/* Define type-specific symbols */
#define __MBIM_CID_QDU_IS_ENUM__

#if defined __MBIM_CID_QDU_IS_ENUM__
/**
 * mbim_cid_qdu_get_string:
 * @val: a MbimCidQdu.
 *
 * Gets the nickname string for the #MbimCidQdu specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.26
 */
const gchar *mbim_cid_qdu_get_string (MbimCidQdu val);
#endif

#if defined __MBIM_CID_QDU_IS_FLAGS__
/**
 * mbim_cid_qdu_build_string_from_mask:
 * @mask: bitmask of MbimCidQdu values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimCidQdu in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.26
 */
gchar *mbim_cid_qdu_build_string_from_mask (MbimCidQdu mask);
#endif
GType mbim_cid_ms_basic_connect_extensions_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CID_MS_BASIC_CONNECT_EXTENSIONS (mbim_cid_ms_basic_connect_extensions_get_type ())

/* Define type-specific symbols */
#define __MBIM_CID_MS_BASIC_CONNECT_EXTENSIONS_IS_ENUM__

#if defined __MBIM_CID_MS_BASIC_CONNECT_EXTENSIONS_IS_ENUM__
/**
 * mbim_cid_ms_basic_connect_extensions_get_string:
 * @val: a MbimCidMsBasicConnectExtensions.
 *
 * Gets the nickname string for the #MbimCidMsBasicConnectExtensions specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.18
 */
const gchar *mbim_cid_ms_basic_connect_extensions_get_string (MbimCidMsBasicConnectExtensions val);
#endif

#if defined __MBIM_CID_MS_BASIC_CONNECT_EXTENSIONS_IS_FLAGS__
/**
 * mbim_cid_ms_basic_connect_extensions_build_string_from_mask:
 * @mask: bitmask of MbimCidMsBasicConnectExtensions values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimCidMsBasicConnectExtensions in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.18
 */
gchar *mbim_cid_ms_basic_connect_extensions_build_string_from_mask (MbimCidMsBasicConnectExtensions mask);
#endif
GType mbim_cid_ms_uicc_low_level_access_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CID_MS_UICC_LOW_LEVEL_ACCESS (mbim_cid_ms_uicc_low_level_access_get_type ())

/* Define type-specific symbols */
#define __MBIM_CID_MS_UICC_LOW_LEVEL_ACCESS_IS_ENUM__

#if defined __MBIM_CID_MS_UICC_LOW_LEVEL_ACCESS_IS_ENUM__
/**
 * mbim_cid_ms_uicc_low_level_access_get_string:
 * @val: a MbimCidMsUiccLowLevelAccess.
 *
 * Gets the nickname string for the #MbimCidMsUiccLowLevelAccess specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.26
 */
const gchar *mbim_cid_ms_uicc_low_level_access_get_string (MbimCidMsUiccLowLevelAccess val);
#endif

#if defined __MBIM_CID_MS_UICC_LOW_LEVEL_ACCESS_IS_FLAGS__
/**
 * mbim_cid_ms_uicc_low_level_access_build_string_from_mask:
 * @mask: bitmask of MbimCidMsUiccLowLevelAccess values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimCidMsUiccLowLevelAccess in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.26
 */
gchar *mbim_cid_ms_uicc_low_level_access_build_string_from_mask (MbimCidMsUiccLowLevelAccess mask);
#endif
GType mbim_cid_quectel_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CID_QUECTEL (mbim_cid_quectel_get_type ())

/* Define type-specific symbols */
#define __MBIM_CID_QUECTEL_IS_ENUM__

#if defined __MBIM_CID_QUECTEL_IS_ENUM__
/**
 * mbim_cid_quectel_get_string:
 * @val: a MbimCidQuectel.
 *
 * Gets the nickname string for the #MbimCidQuectel specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.26.2
 */
const gchar *mbim_cid_quectel_get_string (MbimCidQuectel val);
#endif

#if defined __MBIM_CID_QUECTEL_IS_FLAGS__
/**
 * mbim_cid_quectel_build_string_from_mask:
 * @mask: bitmask of MbimCidQuectel values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimCidQuectel in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.26.2
 */
gchar *mbim_cid_quectel_build_string_from_mask (MbimCidQuectel mask);
#endif
GType mbim_cid_intel_thermal_rf_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CID_INTEL_THERMAL_RF (mbim_cid_intel_thermal_rf_get_type ())

/* Define type-specific symbols */
#define __MBIM_CID_INTEL_THERMAL_RF_IS_ENUM__

#if defined __MBIM_CID_INTEL_THERMAL_RF_IS_ENUM__
/**
 * mbim_cid_intel_thermal_rf_get_string:
 * @val: a MbimCidIntelThermalRf.
 *
 * Gets the nickname string for the #MbimCidIntelThermalRf specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.28
 */
const gchar *mbim_cid_intel_thermal_rf_get_string (MbimCidIntelThermalRf val);
#endif

#if defined __MBIM_CID_INTEL_THERMAL_RF_IS_FLAGS__
/**
 * mbim_cid_intel_thermal_rf_build_string_from_mask:
 * @mask: bitmask of MbimCidIntelThermalRf values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimCidIntelThermalRf in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.28
 */
gchar *mbim_cid_intel_thermal_rf_build_string_from_mask (MbimCidIntelThermalRf mask);
#endif
GType mbim_cid_ms_voice_extensions_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CID_MS_VOICE_EXTENSIONS (mbim_cid_ms_voice_extensions_get_type ())

/* Define type-specific symbols */
#define __MBIM_CID_MS_VOICE_EXTENSIONS_IS_ENUM__

#if defined __MBIM_CID_MS_VOICE_EXTENSIONS_IS_ENUM__
/**
 * mbim_cid_ms_voice_extensions_get_string:
 * @val: a MbimCidMsVoiceExtensions.
 *
 * Gets the nickname string for the #MbimCidMsVoiceExtensions specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.28
 */
const gchar *mbim_cid_ms_voice_extensions_get_string (MbimCidMsVoiceExtensions val);
#endif

#if defined __MBIM_CID_MS_VOICE_EXTENSIONS_IS_FLAGS__
/**
 * mbim_cid_ms_voice_extensions_build_string_from_mask:
 * @mask: bitmask of MbimCidMsVoiceExtensions values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimCidMsVoiceExtensions in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.28
 */
gchar *mbim_cid_ms_voice_extensions_build_string_from_mask (MbimCidMsVoiceExtensions mask);
#endif

/* enumerations from "../libmbim/src/libmbim-glib/mbim-enums.h" */
GType mbim_device_type_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_DEVICE_TYPE (mbim_device_type_get_type ())

/* Define type-specific symbols */
#define __MBIM_DEVICE_TYPE_IS_ENUM__

#if defined __MBIM_DEVICE_TYPE_IS_ENUM__
/**
 * mbim_device_type_get_string:
 * @val: a MbimDeviceType.
 *
 * Gets the nickname string for the #MbimDeviceType specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_device_type_get_string (MbimDeviceType val);
#endif

#if defined __MBIM_DEVICE_TYPE_IS_FLAGS__
/**
 * mbim_device_type_build_string_from_mask:
 * @mask: bitmask of MbimDeviceType values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimDeviceType in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_device_type_build_string_from_mask (MbimDeviceType mask);
#endif
GType mbim_cellular_class_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CELLULAR_CLASS (mbim_cellular_class_get_type ())

/* Define type-specific symbols */
#define __MBIM_CELLULAR_CLASS_IS_FLAGS__

#if defined __MBIM_CELLULAR_CLASS_IS_ENUM__
/**
 * mbim_cellular_class_get_string:
 * @val: a MbimCellularClass.
 *
 * Gets the nickname string for the #MbimCellularClass specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_cellular_class_get_string (MbimCellularClass val);
#endif

#if defined __MBIM_CELLULAR_CLASS_IS_FLAGS__
/**
 * mbim_cellular_class_build_string_from_mask:
 * @mask: bitmask of MbimCellularClass values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimCellularClass in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_cellular_class_build_string_from_mask (MbimCellularClass mask);
#endif
GType mbim_voice_class_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_VOICE_CLASS (mbim_voice_class_get_type ())

/* Define type-specific symbols */
#define __MBIM_VOICE_CLASS_IS_ENUM__

#if defined __MBIM_VOICE_CLASS_IS_ENUM__
/**
 * mbim_voice_class_get_string:
 * @val: a MbimVoiceClass.
 *
 * Gets the nickname string for the #MbimVoiceClass specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_voice_class_get_string (MbimVoiceClass val);
#endif

#if defined __MBIM_VOICE_CLASS_IS_FLAGS__
/**
 * mbim_voice_class_build_string_from_mask:
 * @mask: bitmask of MbimVoiceClass values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimVoiceClass in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_voice_class_build_string_from_mask (MbimVoiceClass mask);
#endif
GType mbim_sim_class_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_SIM_CLASS (mbim_sim_class_get_type ())

/* Define type-specific symbols */
#define __MBIM_SIM_CLASS_IS_FLAGS__

#if defined __MBIM_SIM_CLASS_IS_ENUM__
/**
 * mbim_sim_class_get_string:
 * @val: a MbimSimClass.
 *
 * Gets the nickname string for the #MbimSimClass specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_sim_class_get_string (MbimSimClass val);
#endif

#if defined __MBIM_SIM_CLASS_IS_FLAGS__
/**
 * mbim_sim_class_build_string_from_mask:
 * @mask: bitmask of MbimSimClass values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimSimClass in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_sim_class_build_string_from_mask (MbimSimClass mask);
#endif
GType mbim_data_class_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_DATA_CLASS (mbim_data_class_get_type ())

/* Define type-specific symbols */
#define __MBIM_DATA_CLASS_IS_FLAGS__

#if defined __MBIM_DATA_CLASS_IS_ENUM__
/**
 * mbim_data_class_get_string:
 * @val: a MbimDataClass.
 *
 * Gets the nickname string for the #MbimDataClass specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_data_class_get_string (MbimDataClass val);
#endif

#if defined __MBIM_DATA_CLASS_IS_FLAGS__
/**
 * mbim_data_class_build_string_from_mask:
 * @mask: bitmask of MbimDataClass values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimDataClass in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_data_class_build_string_from_mask (MbimDataClass mask);
#endif
GType mbim_sms_caps_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_SMS_CAPS (mbim_sms_caps_get_type ())

/* Define type-specific symbols */
#define __MBIM_SMS_CAPS_IS_FLAGS__

#if defined __MBIM_SMS_CAPS_IS_ENUM__
/**
 * mbim_sms_caps_get_string:
 * @val: a MbimSmsCaps.
 *
 * Gets the nickname string for the #MbimSmsCaps specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_sms_caps_get_string (MbimSmsCaps val);
#endif

#if defined __MBIM_SMS_CAPS_IS_FLAGS__
/**
 * mbim_sms_caps_build_string_from_mask:
 * @mask: bitmask of MbimSmsCaps values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimSmsCaps in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_sms_caps_build_string_from_mask (MbimSmsCaps mask);
#endif
GType mbim_ctrl_caps_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CTRL_CAPS (mbim_ctrl_caps_get_type ())

/* Define type-specific symbols */
#define __MBIM_CTRL_CAPS_IS_FLAGS__

#if defined __MBIM_CTRL_CAPS_IS_ENUM__
/**
 * mbim_ctrl_caps_get_string:
 * @val: a MbimCtrlCaps.
 *
 * Gets the nickname string for the #MbimCtrlCaps specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_ctrl_caps_get_string (MbimCtrlCaps val);
#endif

#if defined __MBIM_CTRL_CAPS_IS_FLAGS__
/**
 * mbim_ctrl_caps_build_string_from_mask:
 * @mask: bitmask of MbimCtrlCaps values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimCtrlCaps in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_ctrl_caps_build_string_from_mask (MbimCtrlCaps mask);
#endif
GType mbim_subscriber_ready_state_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_SUBSCRIBER_READY_STATE (mbim_subscriber_ready_state_get_type ())

/* Define type-specific symbols */
#define __MBIM_SUBSCRIBER_READY_STATE_IS_ENUM__

#if defined __MBIM_SUBSCRIBER_READY_STATE_IS_ENUM__
/**
 * mbim_subscriber_ready_state_get_string:
 * @val: a MbimSubscriberReadyState.
 *
 * Gets the nickname string for the #MbimSubscriberReadyState specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_subscriber_ready_state_get_string (MbimSubscriberReadyState val);
#endif

#if defined __MBIM_SUBSCRIBER_READY_STATE_IS_FLAGS__
/**
 * mbim_subscriber_ready_state_build_string_from_mask:
 * @mask: bitmask of MbimSubscriberReadyState values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimSubscriberReadyState in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_subscriber_ready_state_build_string_from_mask (MbimSubscriberReadyState mask);
#endif
GType mbim_ready_info_flag_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_READY_INFO_FLAG (mbim_ready_info_flag_get_type ())

/* Define type-specific symbols */
#define __MBIM_READY_INFO_FLAG_IS_FLAGS__

#if defined __MBIM_READY_INFO_FLAG_IS_ENUM__
/**
 * mbim_ready_info_flag_get_string:
 * @val: a MbimReadyInfoFlag.
 *
 * Gets the nickname string for the #MbimReadyInfoFlag specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_ready_info_flag_get_string (MbimReadyInfoFlag val);
#endif

#if defined __MBIM_READY_INFO_FLAG_IS_FLAGS__
/**
 * mbim_ready_info_flag_build_string_from_mask:
 * @mask: bitmask of MbimReadyInfoFlag values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimReadyInfoFlag in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_ready_info_flag_build_string_from_mask (MbimReadyInfoFlag mask);
#endif
GType mbim_radio_switch_state_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_RADIO_SWITCH_STATE (mbim_radio_switch_state_get_type ())

/* Define type-specific symbols */
#define __MBIM_RADIO_SWITCH_STATE_IS_ENUM__

#if defined __MBIM_RADIO_SWITCH_STATE_IS_ENUM__
/**
 * mbim_radio_switch_state_get_string:
 * @val: a MbimRadioSwitchState.
 *
 * Gets the nickname string for the #MbimRadioSwitchState specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_radio_switch_state_get_string (MbimRadioSwitchState val);
#endif

#if defined __MBIM_RADIO_SWITCH_STATE_IS_FLAGS__
/**
 * mbim_radio_switch_state_build_string_from_mask:
 * @mask: bitmask of MbimRadioSwitchState values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimRadioSwitchState in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_radio_switch_state_build_string_from_mask (MbimRadioSwitchState mask);
#endif
GType mbim_pin_type_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_PIN_TYPE (mbim_pin_type_get_type ())

/* Define type-specific symbols */
#define __MBIM_PIN_TYPE_IS_ENUM__

#if defined __MBIM_PIN_TYPE_IS_ENUM__
/**
 * mbim_pin_type_get_string:
 * @val: a MbimPinType.
 *
 * Gets the nickname string for the #MbimPinType specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_pin_type_get_string (MbimPinType val);
#endif

#if defined __MBIM_PIN_TYPE_IS_FLAGS__
/**
 * mbim_pin_type_build_string_from_mask:
 * @mask: bitmask of MbimPinType values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimPinType in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_pin_type_build_string_from_mask (MbimPinType mask);
#endif
GType mbim_pin_state_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_PIN_STATE (mbim_pin_state_get_type ())

/* Define type-specific symbols */
#define __MBIM_PIN_STATE_IS_ENUM__

#if defined __MBIM_PIN_STATE_IS_ENUM__
/**
 * mbim_pin_state_get_string:
 * @val: a MbimPinState.
 *
 * Gets the nickname string for the #MbimPinState specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_pin_state_get_string (MbimPinState val);
#endif

#if defined __MBIM_PIN_STATE_IS_FLAGS__
/**
 * mbim_pin_state_build_string_from_mask:
 * @mask: bitmask of MbimPinState values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimPinState in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_pin_state_build_string_from_mask (MbimPinState mask);
#endif
GType mbim_pin_operation_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_PIN_OPERATION (mbim_pin_operation_get_type ())

/* Define type-specific symbols */
#define __MBIM_PIN_OPERATION_IS_ENUM__

#if defined __MBIM_PIN_OPERATION_IS_ENUM__
/**
 * mbim_pin_operation_get_string:
 * @val: a MbimPinOperation.
 *
 * Gets the nickname string for the #MbimPinOperation specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_pin_operation_get_string (MbimPinOperation val);
#endif

#if defined __MBIM_PIN_OPERATION_IS_FLAGS__
/**
 * mbim_pin_operation_build_string_from_mask:
 * @mask: bitmask of MbimPinOperation values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimPinOperation in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_pin_operation_build_string_from_mask (MbimPinOperation mask);
#endif
GType mbim_pin_mode_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_PIN_MODE (mbim_pin_mode_get_type ())

/* Define type-specific symbols */
#define __MBIM_PIN_MODE_IS_ENUM__

#if defined __MBIM_PIN_MODE_IS_ENUM__
/**
 * mbim_pin_mode_get_string:
 * @val: a MbimPinMode.
 *
 * Gets the nickname string for the #MbimPinMode specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_pin_mode_get_string (MbimPinMode val);
#endif

#if defined __MBIM_PIN_MODE_IS_FLAGS__
/**
 * mbim_pin_mode_build_string_from_mask:
 * @mask: bitmask of MbimPinMode values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimPinMode in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_pin_mode_build_string_from_mask (MbimPinMode mask);
#endif
GType mbim_pin_format_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_PIN_FORMAT (mbim_pin_format_get_type ())

/* Define type-specific symbols */
#define __MBIM_PIN_FORMAT_IS_ENUM__

#if defined __MBIM_PIN_FORMAT_IS_ENUM__
/**
 * mbim_pin_format_get_string:
 * @val: a MbimPinFormat.
 *
 * Gets the nickname string for the #MbimPinFormat specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_pin_format_get_string (MbimPinFormat val);
#endif

#if defined __MBIM_PIN_FORMAT_IS_FLAGS__
/**
 * mbim_pin_format_build_string_from_mask:
 * @mask: bitmask of MbimPinFormat values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimPinFormat in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_pin_format_build_string_from_mask (MbimPinFormat mask);
#endif
GType mbim_provider_state_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_PROVIDER_STATE (mbim_provider_state_get_type ())

/* Define type-specific symbols */
#define __MBIM_PROVIDER_STATE_IS_FLAGS__

#if defined __MBIM_PROVIDER_STATE_IS_ENUM__
/**
 * mbim_provider_state_get_string:
 * @val: a MbimProviderState.
 *
 * Gets the nickname string for the #MbimProviderState specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.2
 */
const gchar *mbim_provider_state_get_string (MbimProviderState val);
#endif

#if defined __MBIM_PROVIDER_STATE_IS_FLAGS__
/**
 * mbim_provider_state_build_string_from_mask:
 * @mask: bitmask of MbimProviderState values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimProviderState in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.2
 */
gchar *mbim_provider_state_build_string_from_mask (MbimProviderState mask);
#endif
GType mbim_access_media_type_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_ACCESS_MEDIA_TYPE (mbim_access_media_type_get_type ())

/* Define type-specific symbols */
#define __MBIM_ACCESS_MEDIA_TYPE_IS_ENUM__

#if defined __MBIM_ACCESS_MEDIA_TYPE_IS_ENUM__
/**
 * mbim_access_media_type_get_string:
 * @val: a MbimAccessMediaType.
 *
 * Gets the nickname string for the #MbimAccessMediaType specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.28
 */
const gchar *mbim_access_media_type_get_string (MbimAccessMediaType val);
#endif

#if defined __MBIM_ACCESS_MEDIA_TYPE_IS_FLAGS__
/**
 * mbim_access_media_type_build_string_from_mask:
 * @mask: bitmask of MbimAccessMediaType values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimAccessMediaType in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.28
 */
gchar *mbim_access_media_type_build_string_from_mask (MbimAccessMediaType mask);
#endif
GType mbim_visible_providers_action_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_VISIBLE_PROVIDERS_ACTION (mbim_visible_providers_action_get_type ())

/* Define type-specific symbols */
#define __MBIM_VISIBLE_PROVIDERS_ACTION_IS_ENUM__

#if defined __MBIM_VISIBLE_PROVIDERS_ACTION_IS_ENUM__
/**
 * mbim_visible_providers_action_get_string:
 * @val: a MbimVisibleProvidersAction.
 *
 * Gets the nickname string for the #MbimVisibleProvidersAction specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.2
 */
const gchar *mbim_visible_providers_action_get_string (MbimVisibleProvidersAction val);
#endif

#if defined __MBIM_VISIBLE_PROVIDERS_ACTION_IS_FLAGS__
/**
 * mbim_visible_providers_action_build_string_from_mask:
 * @mask: bitmask of MbimVisibleProvidersAction values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimVisibleProvidersAction in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.2
 */
gchar *mbim_visible_providers_action_build_string_from_mask (MbimVisibleProvidersAction mask);
#endif
GType mbim_nw_error_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_NW_ERROR (mbim_nw_error_get_type ())

/* Define type-specific symbols */
#define __MBIM_NW_ERROR_IS_ENUM__

#if defined __MBIM_NW_ERROR_IS_ENUM__
/**
 * mbim_nw_error_get_string:
 * @val: a MbimNwError.
 *
 * Gets the nickname string for the #MbimNwError specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_nw_error_get_string (MbimNwError val);
#endif

#if defined __MBIM_NW_ERROR_IS_FLAGS__
/**
 * mbim_nw_error_build_string_from_mask:
 * @mask: bitmask of MbimNwError values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimNwError in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_nw_error_build_string_from_mask (MbimNwError mask);
#endif
GType mbim_register_action_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_REGISTER_ACTION (mbim_register_action_get_type ())

/* Define type-specific symbols */
#define __MBIM_REGISTER_ACTION_IS_ENUM__

#if defined __MBIM_REGISTER_ACTION_IS_ENUM__
/**
 * mbim_register_action_get_string:
 * @val: a MbimRegisterAction.
 *
 * Gets the nickname string for the #MbimRegisterAction specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_register_action_get_string (MbimRegisterAction val);
#endif

#if defined __MBIM_REGISTER_ACTION_IS_FLAGS__
/**
 * mbim_register_action_build_string_from_mask:
 * @mask: bitmask of MbimRegisterAction values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimRegisterAction in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_register_action_build_string_from_mask (MbimRegisterAction mask);
#endif
GType mbim_register_state_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_REGISTER_STATE (mbim_register_state_get_type ())

/* Define type-specific symbols */
#define __MBIM_REGISTER_STATE_IS_ENUM__

#if defined __MBIM_REGISTER_STATE_IS_ENUM__
/**
 * mbim_register_state_get_string:
 * @val: a MbimRegisterState.
 *
 * Gets the nickname string for the #MbimRegisterState specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_register_state_get_string (MbimRegisterState val);
#endif

#if defined __MBIM_REGISTER_STATE_IS_FLAGS__
/**
 * mbim_register_state_build_string_from_mask:
 * @mask: bitmask of MbimRegisterState values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimRegisterState in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_register_state_build_string_from_mask (MbimRegisterState mask);
#endif
GType mbim_register_mode_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_REGISTER_MODE (mbim_register_mode_get_type ())

/* Define type-specific symbols */
#define __MBIM_REGISTER_MODE_IS_ENUM__

#if defined __MBIM_REGISTER_MODE_IS_ENUM__
/**
 * mbim_register_mode_get_string:
 * @val: a MbimRegisterMode.
 *
 * Gets the nickname string for the #MbimRegisterMode specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_register_mode_get_string (MbimRegisterMode val);
#endif

#if defined __MBIM_REGISTER_MODE_IS_FLAGS__
/**
 * mbim_register_mode_build_string_from_mask:
 * @mask: bitmask of MbimRegisterMode values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimRegisterMode in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_register_mode_build_string_from_mask (MbimRegisterMode mask);
#endif
GType mbim_registration_flag_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_REGISTRATION_FLAG (mbim_registration_flag_get_type ())

/* Define type-specific symbols */
#define __MBIM_REGISTRATION_FLAG_IS_FLAGS__

#if defined __MBIM_REGISTRATION_FLAG_IS_ENUM__
/**
 * mbim_registration_flag_get_string:
 * @val: a MbimRegistrationFlag.
 *
 * Gets the nickname string for the #MbimRegistrationFlag specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_registration_flag_get_string (MbimRegistrationFlag val);
#endif

#if defined __MBIM_REGISTRATION_FLAG_IS_FLAGS__
/**
 * mbim_registration_flag_build_string_from_mask:
 * @mask: bitmask of MbimRegistrationFlag values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimRegistrationFlag in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_registration_flag_build_string_from_mask (MbimRegistrationFlag mask);
#endif
GType mbim_wake_type_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_WAKE_TYPE (mbim_wake_type_get_type ())

/* Define type-specific symbols */
#define __MBIM_WAKE_TYPE_IS_ENUM__

#if defined __MBIM_WAKE_TYPE_IS_ENUM__
/**
 * mbim_wake_type_get_string:
 * @val: a MbimWakeType.
 *
 * Gets the nickname string for the #MbimWakeType specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.28
 */
const gchar *mbim_wake_type_get_string (MbimWakeType val);
#endif

#if defined __MBIM_WAKE_TYPE_IS_FLAGS__
/**
 * mbim_wake_type_build_string_from_mask:
 * @mask: bitmask of MbimWakeType values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimWakeType in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.28
 */
gchar *mbim_wake_type_build_string_from_mask (MbimWakeType mask);
#endif
GType mbim_packet_service_action_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_PACKET_SERVICE_ACTION (mbim_packet_service_action_get_type ())

/* Define type-specific symbols */
#define __MBIM_PACKET_SERVICE_ACTION_IS_ENUM__

#if defined __MBIM_PACKET_SERVICE_ACTION_IS_ENUM__
/**
 * mbim_packet_service_action_get_string:
 * @val: a MbimPacketServiceAction.
 *
 * Gets the nickname string for the #MbimPacketServiceAction specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_packet_service_action_get_string (MbimPacketServiceAction val);
#endif

#if defined __MBIM_PACKET_SERVICE_ACTION_IS_FLAGS__
/**
 * mbim_packet_service_action_build_string_from_mask:
 * @mask: bitmask of MbimPacketServiceAction values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimPacketServiceAction in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_packet_service_action_build_string_from_mask (MbimPacketServiceAction mask);
#endif
GType mbim_packet_service_state_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_PACKET_SERVICE_STATE (mbim_packet_service_state_get_type ())

/* Define type-specific symbols */
#define __MBIM_PACKET_SERVICE_STATE_IS_ENUM__

#if defined __MBIM_PACKET_SERVICE_STATE_IS_ENUM__
/**
 * mbim_packet_service_state_get_string:
 * @val: a MbimPacketServiceState.
 *
 * Gets the nickname string for the #MbimPacketServiceState specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_packet_service_state_get_string (MbimPacketServiceState val);
#endif

#if defined __MBIM_PACKET_SERVICE_STATE_IS_FLAGS__
/**
 * mbim_packet_service_state_build_string_from_mask:
 * @mask: bitmask of MbimPacketServiceState values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimPacketServiceState in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_packet_service_state_build_string_from_mask (MbimPacketServiceState mask);
#endif
GType mbim_activation_command_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_ACTIVATION_COMMAND (mbim_activation_command_get_type ())

/* Define type-specific symbols */
#define __MBIM_ACTIVATION_COMMAND_IS_ENUM__

#if defined __MBIM_ACTIVATION_COMMAND_IS_ENUM__
/**
 * mbim_activation_command_get_string:
 * @val: a MbimActivationCommand.
 *
 * Gets the nickname string for the #MbimActivationCommand specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_activation_command_get_string (MbimActivationCommand val);
#endif

#if defined __MBIM_ACTIVATION_COMMAND_IS_FLAGS__
/**
 * mbim_activation_command_build_string_from_mask:
 * @mask: bitmask of MbimActivationCommand values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimActivationCommand in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_activation_command_build_string_from_mask (MbimActivationCommand mask);
#endif
GType mbim_compression_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_COMPRESSION (mbim_compression_get_type ())

/* Define type-specific symbols */
#define __MBIM_COMPRESSION_IS_ENUM__

#if defined __MBIM_COMPRESSION_IS_ENUM__
/**
 * mbim_compression_get_string:
 * @val: a MbimCompression.
 *
 * Gets the nickname string for the #MbimCompression specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_compression_get_string (MbimCompression val);
#endif

#if defined __MBIM_COMPRESSION_IS_FLAGS__
/**
 * mbim_compression_build_string_from_mask:
 * @mask: bitmask of MbimCompression values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimCompression in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_compression_build_string_from_mask (MbimCompression mask);
#endif
GType mbim_auth_protocol_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_AUTH_PROTOCOL (mbim_auth_protocol_get_type ())

/* Define type-specific symbols */
#define __MBIM_AUTH_PROTOCOL_IS_ENUM__

#if defined __MBIM_AUTH_PROTOCOL_IS_ENUM__
/**
 * mbim_auth_protocol_get_string:
 * @val: a MbimAuthProtocol.
 *
 * Gets the nickname string for the #MbimAuthProtocol specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_auth_protocol_get_string (MbimAuthProtocol val);
#endif

#if defined __MBIM_AUTH_PROTOCOL_IS_FLAGS__
/**
 * mbim_auth_protocol_build_string_from_mask:
 * @mask: bitmask of MbimAuthProtocol values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimAuthProtocol in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_auth_protocol_build_string_from_mask (MbimAuthProtocol mask);
#endif
GType mbim_context_ip_type_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CONTEXT_IP_TYPE (mbim_context_ip_type_get_type ())

/* Define type-specific symbols */
#define __MBIM_CONTEXT_IP_TYPE_IS_ENUM__

#if defined __MBIM_CONTEXT_IP_TYPE_IS_ENUM__
/**
 * mbim_context_ip_type_get_string:
 * @val: a MbimContextIpType.
 *
 * Gets the nickname string for the #MbimContextIpType specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_context_ip_type_get_string (MbimContextIpType val);
#endif

#if defined __MBIM_CONTEXT_IP_TYPE_IS_FLAGS__
/**
 * mbim_context_ip_type_build_string_from_mask:
 * @mask: bitmask of MbimContextIpType values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimContextIpType in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_context_ip_type_build_string_from_mask (MbimContextIpType mask);
#endif
GType mbim_activation_state_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_ACTIVATION_STATE (mbim_activation_state_get_type ())

/* Define type-specific symbols */
#define __MBIM_ACTIVATION_STATE_IS_ENUM__

#if defined __MBIM_ACTIVATION_STATE_IS_ENUM__
/**
 * mbim_activation_state_get_string:
 * @val: a MbimActivationState.
 *
 * Gets the nickname string for the #MbimActivationState specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_activation_state_get_string (MbimActivationState val);
#endif

#if defined __MBIM_ACTIVATION_STATE_IS_FLAGS__
/**
 * mbim_activation_state_build_string_from_mask:
 * @mask: bitmask of MbimActivationState values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimActivationState in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_activation_state_build_string_from_mask (MbimActivationState mask);
#endif
GType mbim_voice_call_state_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_VOICE_CALL_STATE (mbim_voice_call_state_get_type ())

/* Define type-specific symbols */
#define __MBIM_VOICE_CALL_STATE_IS_ENUM__

#if defined __MBIM_VOICE_CALL_STATE_IS_ENUM__
/**
 * mbim_voice_call_state_get_string:
 * @val: a MbimVoiceCallState.
 *
 * Gets the nickname string for the #MbimVoiceCallState specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_voice_call_state_get_string (MbimVoiceCallState val);
#endif

#if defined __MBIM_VOICE_CALL_STATE_IS_FLAGS__
/**
 * mbim_voice_call_state_build_string_from_mask:
 * @mask: bitmask of MbimVoiceCallState values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimVoiceCallState in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_voice_call_state_build_string_from_mask (MbimVoiceCallState mask);
#endif
GType mbim_ip_configuration_available_flag_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_IP_CONFIGURATION_AVAILABLE_FLAG (mbim_ip_configuration_available_flag_get_type ())

/* Define type-specific symbols */
#define __MBIM_IP_CONFIGURATION_AVAILABLE_FLAG_IS_FLAGS__

#if defined __MBIM_IP_CONFIGURATION_AVAILABLE_FLAG_IS_ENUM__
/**
 * mbim_ip_configuration_available_flag_get_string:
 * @val: a MbimIPConfigurationAvailableFlag.
 *
 * Gets the nickname string for the #MbimIPConfigurationAvailableFlag specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_ip_configuration_available_flag_get_string (MbimIPConfigurationAvailableFlag val);
#endif

#if defined __MBIM_IP_CONFIGURATION_AVAILABLE_FLAG_IS_FLAGS__
/**
 * mbim_ip_configuration_available_flag_build_string_from_mask:
 * @mask: bitmask of MbimIPConfigurationAvailableFlag values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimIPConfigurationAvailableFlag in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_ip_configuration_available_flag_build_string_from_mask (MbimIPConfigurationAvailableFlag mask);
#endif
GType mbim_sms_storage_state_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_SMS_STORAGE_STATE (mbim_sms_storage_state_get_type ())

/* Define type-specific symbols */
#define __MBIM_SMS_STORAGE_STATE_IS_ENUM__

#if defined __MBIM_SMS_STORAGE_STATE_IS_ENUM__
/**
 * mbim_sms_storage_state_get_string:
 * @val: a MbimSmsStorageState.
 *
 * Gets the nickname string for the #MbimSmsStorageState specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.4
 */
const gchar *mbim_sms_storage_state_get_string (MbimSmsStorageState val);
#endif

#if defined __MBIM_SMS_STORAGE_STATE_IS_FLAGS__
/**
 * mbim_sms_storage_state_build_string_from_mask:
 * @mask: bitmask of MbimSmsStorageState values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimSmsStorageState in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.4
 */
gchar *mbim_sms_storage_state_build_string_from_mask (MbimSmsStorageState mask);
#endif
GType mbim_sms_format_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_SMS_FORMAT (mbim_sms_format_get_type ())

/* Define type-specific symbols */
#define __MBIM_SMS_FORMAT_IS_ENUM__

#if defined __MBIM_SMS_FORMAT_IS_ENUM__
/**
 * mbim_sms_format_get_string:
 * @val: a MbimSmsFormat.
 *
 * Gets the nickname string for the #MbimSmsFormat specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.4
 */
const gchar *mbim_sms_format_get_string (MbimSmsFormat val);
#endif

#if defined __MBIM_SMS_FORMAT_IS_FLAGS__
/**
 * mbim_sms_format_build_string_from_mask:
 * @mask: bitmask of MbimSmsFormat values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimSmsFormat in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.4
 */
gchar *mbim_sms_format_build_string_from_mask (MbimSmsFormat mask);
#endif
GType mbim_sms_flag_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_SMS_FLAG (mbim_sms_flag_get_type ())

/* Define type-specific symbols */
#define __MBIM_SMS_FLAG_IS_ENUM__

#if defined __MBIM_SMS_FLAG_IS_ENUM__
/**
 * mbim_sms_flag_get_string:
 * @val: a MbimSmsFlag.
 *
 * Gets the nickname string for the #MbimSmsFlag specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.4
 */
const gchar *mbim_sms_flag_get_string (MbimSmsFlag val);
#endif

#if defined __MBIM_SMS_FLAG_IS_FLAGS__
/**
 * mbim_sms_flag_build_string_from_mask:
 * @mask: bitmask of MbimSmsFlag values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimSmsFlag in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.4
 */
gchar *mbim_sms_flag_build_string_from_mask (MbimSmsFlag mask);
#endif
GType mbim_sms_cdma_lang_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_SMS_CDMA_LANG (mbim_sms_cdma_lang_get_type ())

/* Define type-specific symbols */
#define __MBIM_SMS_CDMA_LANG_IS_ENUM__

#if defined __MBIM_SMS_CDMA_LANG_IS_ENUM__
/**
 * mbim_sms_cdma_lang_get_string:
 * @val: a MbimSmsCdmaLang.
 *
 * Gets the nickname string for the #MbimSmsCdmaLang specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.4
 */
const gchar *mbim_sms_cdma_lang_get_string (MbimSmsCdmaLang val);
#endif

#if defined __MBIM_SMS_CDMA_LANG_IS_FLAGS__
/**
 * mbim_sms_cdma_lang_build_string_from_mask:
 * @mask: bitmask of MbimSmsCdmaLang values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimSmsCdmaLang in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.4
 */
gchar *mbim_sms_cdma_lang_build_string_from_mask (MbimSmsCdmaLang mask);
#endif
GType mbim_sms_cdma_encoding_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_SMS_CDMA_ENCODING (mbim_sms_cdma_encoding_get_type ())

/* Define type-specific symbols */
#define __MBIM_SMS_CDMA_ENCODING_IS_ENUM__

#if defined __MBIM_SMS_CDMA_ENCODING_IS_ENUM__
/**
 * mbim_sms_cdma_encoding_get_string:
 * @val: a MbimSmsCdmaEncoding.
 *
 * Gets the nickname string for the #MbimSmsCdmaEncoding specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.4
 */
const gchar *mbim_sms_cdma_encoding_get_string (MbimSmsCdmaEncoding val);
#endif

#if defined __MBIM_SMS_CDMA_ENCODING_IS_FLAGS__
/**
 * mbim_sms_cdma_encoding_build_string_from_mask:
 * @mask: bitmask of MbimSmsCdmaEncoding values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimSmsCdmaEncoding in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.4
 */
gchar *mbim_sms_cdma_encoding_build_string_from_mask (MbimSmsCdmaEncoding mask);
#endif
GType mbim_sms_status_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_SMS_STATUS (mbim_sms_status_get_type ())

/* Define type-specific symbols */
#define __MBIM_SMS_STATUS_IS_ENUM__

#if defined __MBIM_SMS_STATUS_IS_ENUM__
/**
 * mbim_sms_status_get_string:
 * @val: a MbimSmsStatus.
 *
 * Gets the nickname string for the #MbimSmsStatus specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.4
 */
const gchar *mbim_sms_status_get_string (MbimSmsStatus val);
#endif

#if defined __MBIM_SMS_STATUS_IS_FLAGS__
/**
 * mbim_sms_status_build_string_from_mask:
 * @mask: bitmask of MbimSmsStatus values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimSmsStatus in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.4
 */
gchar *mbim_sms_status_build_string_from_mask (MbimSmsStatus mask);
#endif
GType mbim_sms_status_flag_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_SMS_STATUS_FLAG (mbim_sms_status_flag_get_type ())

/* Define type-specific symbols */
#define __MBIM_SMS_STATUS_FLAG_IS_ENUM__

#if defined __MBIM_SMS_STATUS_FLAG_IS_ENUM__
/**
 * mbim_sms_status_flag_get_string:
 * @val: a MbimSmsStatusFlag.
 *
 * Gets the nickname string for the #MbimSmsStatusFlag specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.4
 */
const gchar *mbim_sms_status_flag_get_string (MbimSmsStatusFlag val);
#endif

#if defined __MBIM_SMS_STATUS_FLAG_IS_FLAGS__
/**
 * mbim_sms_status_flag_build_string_from_mask:
 * @mask: bitmask of MbimSmsStatusFlag values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimSmsStatusFlag in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.4
 */
gchar *mbim_sms_status_flag_build_string_from_mask (MbimSmsStatusFlag mask);
#endif
GType mbim_ussd_action_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_USSD_ACTION (mbim_ussd_action_get_type ())

/* Define type-specific symbols */
#define __MBIM_USSD_ACTION_IS_ENUM__

#if defined __MBIM_USSD_ACTION_IS_ENUM__
/**
 * mbim_ussd_action_get_string:
 * @val: a MbimUssdAction.
 *
 * Gets the nickname string for the #MbimUssdAction specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.4
 */
const gchar *mbim_ussd_action_get_string (MbimUssdAction val);
#endif

#if defined __MBIM_USSD_ACTION_IS_FLAGS__
/**
 * mbim_ussd_action_build_string_from_mask:
 * @mask: bitmask of MbimUssdAction values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimUssdAction in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.4
 */
gchar *mbim_ussd_action_build_string_from_mask (MbimUssdAction mask);
#endif
GType mbim_ussd_response_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_USSD_RESPONSE (mbim_ussd_response_get_type ())

/* Define type-specific symbols */
#define __MBIM_USSD_RESPONSE_IS_ENUM__

#if defined __MBIM_USSD_RESPONSE_IS_ENUM__
/**
 * mbim_ussd_response_get_string:
 * @val: a MbimUssdResponse.
 *
 * Gets the nickname string for the #MbimUssdResponse specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.4
 */
const gchar *mbim_ussd_response_get_string (MbimUssdResponse val);
#endif

#if defined __MBIM_USSD_RESPONSE_IS_FLAGS__
/**
 * mbim_ussd_response_build_string_from_mask:
 * @mask: bitmask of MbimUssdResponse values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimUssdResponse in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.4
 */
gchar *mbim_ussd_response_build_string_from_mask (MbimUssdResponse mask);
#endif
GType mbim_ussd_session_state_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_USSD_SESSION_STATE (mbim_ussd_session_state_get_type ())

/* Define type-specific symbols */
#define __MBIM_USSD_SESSION_STATE_IS_ENUM__

#if defined __MBIM_USSD_SESSION_STATE_IS_ENUM__
/**
 * mbim_ussd_session_state_get_string:
 * @val: a MbimUssdSessionState.
 *
 * Gets the nickname string for the #MbimUssdSessionState specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.4
 */
const gchar *mbim_ussd_session_state_get_string (MbimUssdSessionState val);
#endif

#if defined __MBIM_USSD_SESSION_STATE_IS_FLAGS__
/**
 * mbim_ussd_session_state_build_string_from_mask:
 * @mask: bitmask of MbimUssdSessionState values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimUssdSessionState in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.4
 */
gchar *mbim_ussd_session_state_build_string_from_mask (MbimUssdSessionState mask);
#endif
GType mbim_phonebook_state_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_PHONEBOOK_STATE (mbim_phonebook_state_get_type ())

/* Define type-specific symbols */
#define __MBIM_PHONEBOOK_STATE_IS_ENUM__

#if defined __MBIM_PHONEBOOK_STATE_IS_ENUM__
/**
 * mbim_phonebook_state_get_string:
 * @val: a MbimPhonebookState.
 *
 * Gets the nickname string for the #MbimPhonebookState specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.4
 */
const gchar *mbim_phonebook_state_get_string (MbimPhonebookState val);
#endif

#if defined __MBIM_PHONEBOOK_STATE_IS_FLAGS__
/**
 * mbim_phonebook_state_build_string_from_mask:
 * @mask: bitmask of MbimPhonebookState values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimPhonebookState in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.4
 */
gchar *mbim_phonebook_state_build_string_from_mask (MbimPhonebookState mask);
#endif
GType mbim_phonebook_flag_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_PHONEBOOK_FLAG (mbim_phonebook_flag_get_type ())

/* Define type-specific symbols */
#define __MBIM_PHONEBOOK_FLAG_IS_ENUM__

#if defined __MBIM_PHONEBOOK_FLAG_IS_ENUM__
/**
 * mbim_phonebook_flag_get_string:
 * @val: a MbimPhonebookFlag.
 *
 * Gets the nickname string for the #MbimPhonebookFlag specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.4
 */
const gchar *mbim_phonebook_flag_get_string (MbimPhonebookFlag val);
#endif

#if defined __MBIM_PHONEBOOK_FLAG_IS_FLAGS__
/**
 * mbim_phonebook_flag_build_string_from_mask:
 * @mask: bitmask of MbimPhonebookFlag values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimPhonebookFlag in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.4
 */
gchar *mbim_phonebook_flag_build_string_from_mask (MbimPhonebookFlag mask);
#endif
GType mbim_phonebook_write_flag_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_PHONEBOOK_WRITE_FLAG (mbim_phonebook_write_flag_get_type ())

/* Define type-specific symbols */
#define __MBIM_PHONEBOOK_WRITE_FLAG_IS_ENUM__

#if defined __MBIM_PHONEBOOK_WRITE_FLAG_IS_ENUM__
/**
 * mbim_phonebook_write_flag_get_string:
 * @val: a MbimPhonebookWriteFlag.
 *
 * Gets the nickname string for the #MbimPhonebookWriteFlag specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.4
 */
const gchar *mbim_phonebook_write_flag_get_string (MbimPhonebookWriteFlag val);
#endif

#if defined __MBIM_PHONEBOOK_WRITE_FLAG_IS_FLAGS__
/**
 * mbim_phonebook_write_flag_build_string_from_mask:
 * @mask: bitmask of MbimPhonebookWriteFlag values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimPhonebookWriteFlag in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.4
 */
gchar *mbim_phonebook_write_flag_build_string_from_mask (MbimPhonebookWriteFlag mask);
#endif
GType mbim_stk_pac_profile_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_STK_PAC_PROFILE (mbim_stk_pac_profile_get_type ())

/* Define type-specific symbols */
#define __MBIM_STK_PAC_PROFILE_IS_ENUM__

#if defined __MBIM_STK_PAC_PROFILE_IS_ENUM__
/**
 * mbim_stk_pac_profile_get_string:
 * @val: a MbimStkPacProfile.
 *
 * Gets the nickname string for the #MbimStkPacProfile specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.4
 */
const gchar *mbim_stk_pac_profile_get_string (MbimStkPacProfile val);
#endif

#if defined __MBIM_STK_PAC_PROFILE_IS_FLAGS__
/**
 * mbim_stk_pac_profile_build_string_from_mask:
 * @mask: bitmask of MbimStkPacProfile values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimStkPacProfile in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.4
 */
gchar *mbim_stk_pac_profile_build_string_from_mask (MbimStkPacProfile mask);
#endif
GType mbim_stk_pac_type_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_STK_PAC_TYPE (mbim_stk_pac_type_get_type ())

/* Define type-specific symbols */
#define __MBIM_STK_PAC_TYPE_IS_ENUM__

#if defined __MBIM_STK_PAC_TYPE_IS_ENUM__
/**
 * mbim_stk_pac_type_get_string:
 * @val: a MbimStkPacType.
 *
 * Gets the nickname string for the #MbimStkPacType specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.4
 */
const gchar *mbim_stk_pac_type_get_string (MbimStkPacType val);
#endif

#if defined __MBIM_STK_PAC_TYPE_IS_FLAGS__
/**
 * mbim_stk_pac_type_build_string_from_mask:
 * @mask: bitmask of MbimStkPacType values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimStkPacType in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.4
 */
gchar *mbim_stk_pac_type_build_string_from_mask (MbimStkPacType mask);
#endif
GType mbim_network_idle_hint_state_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_NETWORK_IDLE_HINT_STATE (mbim_network_idle_hint_state_get_type ())

/* Define type-specific symbols */
#define __MBIM_NETWORK_IDLE_HINT_STATE_IS_ENUM__

#if defined __MBIM_NETWORK_IDLE_HINT_STATE_IS_ENUM__
/**
 * mbim_network_idle_hint_state_get_string:
 * @val: a MbimNetworkIdleHintState.
 *
 * Gets the nickname string for the #MbimNetworkIdleHintState specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.4
 */
const gchar *mbim_network_idle_hint_state_get_string (MbimNetworkIdleHintState val);
#endif

#if defined __MBIM_NETWORK_IDLE_HINT_STATE_IS_FLAGS__
/**
 * mbim_network_idle_hint_state_build_string_from_mask:
 * @mask: bitmask of MbimNetworkIdleHintState values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimNetworkIdleHintState in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.4
 */
gchar *mbim_network_idle_hint_state_build_string_from_mask (MbimNetworkIdleHintState mask);
#endif
GType mbim_emergency_mode_state_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_EMERGENCY_MODE_STATE (mbim_emergency_mode_state_get_type ())

/* Define type-specific symbols */
#define __MBIM_EMERGENCY_MODE_STATE_IS_ENUM__

#if defined __MBIM_EMERGENCY_MODE_STATE_IS_ENUM__
/**
 * mbim_emergency_mode_state_get_string:
 * @val: a MbimEmergencyModeState.
 *
 * Gets the nickname string for the #MbimEmergencyModeState specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.4
 */
const gchar *mbim_emergency_mode_state_get_string (MbimEmergencyModeState val);
#endif

#if defined __MBIM_EMERGENCY_MODE_STATE_IS_FLAGS__
/**
 * mbim_emergency_mode_state_build_string_from_mask:
 * @mask: bitmask of MbimEmergencyModeState values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimEmergencyModeState in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.4
 */
gchar *mbim_emergency_mode_state_build_string_from_mask (MbimEmergencyModeState mask);
#endif
GType mbim_dss_link_state_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_DSS_LINK_STATE (mbim_dss_link_state_get_type ())

/* Define type-specific symbols */
#define __MBIM_DSS_LINK_STATE_IS_ENUM__

#if defined __MBIM_DSS_LINK_STATE_IS_ENUM__
/**
 * mbim_dss_link_state_get_string:
 * @val: a MbimDssLinkState.
 *
 * Gets the nickname string for the #MbimDssLinkState specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.4
 */
const gchar *mbim_dss_link_state_get_string (MbimDssLinkState val);
#endif

#if defined __MBIM_DSS_LINK_STATE_IS_FLAGS__
/**
 * mbim_dss_link_state_build_string_from_mask:
 * @mask: bitmask of MbimDssLinkState values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimDssLinkState in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.4
 */
gchar *mbim_dss_link_state_build_string_from_mask (MbimDssLinkState mask);
#endif
GType mbim_qdu_session_action_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_QDU_SESSION_ACTION (mbim_qdu_session_action_get_type ())

/* Define type-specific symbols */
#define __MBIM_QDU_SESSION_ACTION_IS_ENUM__

#if defined __MBIM_QDU_SESSION_ACTION_IS_ENUM__
/**
 * mbim_qdu_session_action_get_string:
 * @val: a MbimQduSessionAction.
 *
 * Gets the nickname string for the #MbimQduSessionAction specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.26
 */
const gchar *mbim_qdu_session_action_get_string (MbimQduSessionAction val);
#endif

#if defined __MBIM_QDU_SESSION_ACTION_IS_FLAGS__
/**
 * mbim_qdu_session_action_build_string_from_mask:
 * @mask: bitmask of MbimQduSessionAction values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimQduSessionAction in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.26
 */
gchar *mbim_qdu_session_action_build_string_from_mask (MbimQduSessionAction mask);
#endif
GType mbim_qdu_session_type_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_QDU_SESSION_TYPE (mbim_qdu_session_type_get_type ())

/* Define type-specific symbols */
#define __MBIM_QDU_SESSION_TYPE_IS_ENUM__

#if defined __MBIM_QDU_SESSION_TYPE_IS_ENUM__
/**
 * mbim_qdu_session_type_get_string:
 * @val: a MbimQduSessionType.
 *
 * Gets the nickname string for the #MbimQduSessionType specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.26
 */
const gchar *mbim_qdu_session_type_get_string (MbimQduSessionType val);
#endif

#if defined __MBIM_QDU_SESSION_TYPE_IS_FLAGS__
/**
 * mbim_qdu_session_type_build_string_from_mask:
 * @mask: bitmask of MbimQduSessionType values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimQduSessionType in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.26
 */
gchar *mbim_qdu_session_type_build_string_from_mask (MbimQduSessionType mask);
#endif
GType mbim_qdu_session_status_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_QDU_SESSION_STATUS (mbim_qdu_session_status_get_type ())

/* Define type-specific symbols */
#define __MBIM_QDU_SESSION_STATUS_IS_ENUM__

#if defined __MBIM_QDU_SESSION_STATUS_IS_ENUM__
/**
 * mbim_qdu_session_status_get_string:
 * @val: a MbimQduSessionStatus.
 *
 * Gets the nickname string for the #MbimQduSessionStatus specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.26
 */
const gchar *mbim_qdu_session_status_get_string (MbimQduSessionStatus val);
#endif

#if defined __MBIM_QDU_SESSION_STATUS_IS_FLAGS__
/**
 * mbim_qdu_session_status_build_string_from_mask:
 * @mask: bitmask of MbimQduSessionStatus values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimQduSessionStatus in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.26
 */
gchar *mbim_qdu_session_status_build_string_from_mask (MbimQduSessionStatus mask);
#endif
GType mbim_qdu_session_result_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_QDU_SESSION_RESULT (mbim_qdu_session_result_get_type ())

/* Define type-specific symbols */
#define __MBIM_QDU_SESSION_RESULT_IS_ENUM__

#if defined __MBIM_QDU_SESSION_RESULT_IS_ENUM__
/**
 * mbim_qdu_session_result_get_string:
 * @val: a MbimQduSessionResult.
 *
 * Gets the nickname string for the #MbimQduSessionResult specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.26
 */
const gchar *mbim_qdu_session_result_get_string (MbimQduSessionResult val);
#endif

#if defined __MBIM_QDU_SESSION_RESULT_IS_FLAGS__
/**
 * mbim_qdu_session_result_build_string_from_mask:
 * @mask: bitmask of MbimQduSessionResult values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimQduSessionResult in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.26
 */
gchar *mbim_qdu_session_result_build_string_from_mask (MbimQduSessionResult mask);
#endif
GType mbim_qdu_file_type_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_QDU_FILE_TYPE (mbim_qdu_file_type_get_type ())

/* Define type-specific symbols */
#define __MBIM_QDU_FILE_TYPE_IS_ENUM__

#if defined __MBIM_QDU_FILE_TYPE_IS_ENUM__
/**
 * mbim_qdu_file_type_get_string:
 * @val: a MbimQduFileType.
 *
 * Gets the nickname string for the #MbimQduFileType specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.26
 */
const gchar *mbim_qdu_file_type_get_string (MbimQduFileType val);
#endif

#if defined __MBIM_QDU_FILE_TYPE_IS_FLAGS__
/**
 * mbim_qdu_file_type_build_string_from_mask:
 * @mask: bitmask of MbimQduFileType values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimQduFileType in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.26
 */
gchar *mbim_qdu_file_type_build_string_from_mask (MbimQduFileType mask);
#endif
GType mbim_qdu_quectel_reboot_type_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_QDU_QUECTEL_REBOOT_TYPE (mbim_qdu_quectel_reboot_type_get_type ())

/* Define type-specific symbols */
#define __MBIM_QDU_QUECTEL_REBOOT_TYPE_IS_ENUM__

#if defined __MBIM_QDU_QUECTEL_REBOOT_TYPE_IS_ENUM__
/**
 * mbim_qdu_quectel_reboot_type_get_string:
 * @val: a MbimQduQuectelRebootType.
 *
 * Gets the nickname string for the #MbimQduQuectelRebootType specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.28
 */
const gchar *mbim_qdu_quectel_reboot_type_get_string (MbimQduQuectelRebootType val);
#endif

#if defined __MBIM_QDU_QUECTEL_REBOOT_TYPE_IS_FLAGS__
/**
 * mbim_qdu_quectel_reboot_type_build_string_from_mask:
 * @mask: bitmask of MbimQduQuectelRebootType values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimQduQuectelRebootType in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.28
 */
gchar *mbim_qdu_quectel_reboot_type_build_string_from_mask (MbimQduQuectelRebootType mask);
#endif
GType mbim_qdu_quectel_version_type_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_QDU_QUECTEL_VERSION_TYPE (mbim_qdu_quectel_version_type_get_type ())

/* Define type-specific symbols */
#define __MBIM_QDU_QUECTEL_VERSION_TYPE_IS_ENUM__

#if defined __MBIM_QDU_QUECTEL_VERSION_TYPE_IS_ENUM__
/**
 * mbim_qdu_quectel_version_type_get_string:
 * @val: a MbimQduQuectelVersionType.
 *
 * Gets the nickname string for the #MbimQduQuectelVersionType specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.28
 */
const gchar *mbim_qdu_quectel_version_type_get_string (MbimQduQuectelVersionType val);
#endif

#if defined __MBIM_QDU_QUECTEL_VERSION_TYPE_IS_FLAGS__
/**
 * mbim_qdu_quectel_version_type_build_string_from_mask:
 * @mask: bitmask of MbimQduQuectelVersionType values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimQduQuectelVersionType in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.28
 */
gchar *mbim_qdu_quectel_version_type_build_string_from_mask (MbimQduQuectelVersionType mask);
#endif
GType mbim_atds_rat_mode_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_ATDS_RAT_MODE (mbim_atds_rat_mode_get_type ())

/* Define type-specific symbols */
#define __MBIM_ATDS_RAT_MODE_IS_ENUM__

#if defined __MBIM_ATDS_RAT_MODE_IS_ENUM__
/**
 * mbim_atds_rat_mode_get_string:
 * @val: a MbimAtdsRatMode.
 *
 * Gets the nickname string for the #MbimAtdsRatMode specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.16
 */
const gchar *mbim_atds_rat_mode_get_string (MbimAtdsRatMode val);
#endif

#if defined __MBIM_ATDS_RAT_MODE_IS_FLAGS__
/**
 * mbim_atds_rat_mode_build_string_from_mask:
 * @mask: bitmask of MbimAtdsRatMode values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimAtdsRatMode in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.16
 */
gchar *mbim_atds_rat_mode_build_string_from_mask (MbimAtdsRatMode mask);
#endif
GType mbim_atds_provider_plmn_mode_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_ATDS_PROVIDER_PLMN_MODE (mbim_atds_provider_plmn_mode_get_type ())

/* Define type-specific symbols */
#define __MBIM_ATDS_PROVIDER_PLMN_MODE_IS_ENUM__

#if defined __MBIM_ATDS_PROVIDER_PLMN_MODE_IS_ENUM__
/**
 * mbim_atds_provider_plmn_mode_get_string:
 * @val: a MbimAtdsProviderPlmnMode.
 *
 * Gets the nickname string for the #MbimAtdsProviderPlmnMode specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.16
 */
const gchar *mbim_atds_provider_plmn_mode_get_string (MbimAtdsProviderPlmnMode val);
#endif

#if defined __MBIM_ATDS_PROVIDER_PLMN_MODE_IS_FLAGS__
/**
 * mbim_atds_provider_plmn_mode_build_string_from_mask:
 * @mask: bitmask of MbimAtdsProviderPlmnMode values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimAtdsProviderPlmnMode in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.16
 */
gchar *mbim_atds_provider_plmn_mode_build_string_from_mask (MbimAtdsProviderPlmnMode mask);
#endif
GType mbim_pco_type_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_PCO_TYPE (mbim_pco_type_get_type ())

/* Define type-specific symbols */
#define __MBIM_PCO_TYPE_IS_ENUM__

#if defined __MBIM_PCO_TYPE_IS_ENUM__
/**
 * mbim_pco_type_get_string:
 * @val: a MbimPcoType.
 *
 * Gets the nickname string for the #MbimPcoType specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.18
 */
const gchar *mbim_pco_type_get_string (MbimPcoType val);
#endif

#if defined __MBIM_PCO_TYPE_IS_FLAGS__
/**
 * mbim_pco_type_build_string_from_mask:
 * @mask: bitmask of MbimPcoType values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimPcoType in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.18
 */
gchar *mbim_pco_type_build_string_from_mask (MbimPcoType mask);
#endif
GType mbim_lte_attach_context_operation_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_LTE_ATTACH_CONTEXT_OPERATION (mbim_lte_attach_context_operation_get_type ())

/* Define type-specific symbols */
#define __MBIM_LTE_ATTACH_CONTEXT_OPERATION_IS_ENUM__

#if defined __MBIM_LTE_ATTACH_CONTEXT_OPERATION_IS_ENUM__
/**
 * mbim_lte_attach_context_operation_get_string:
 * @val: a MbimLteAttachContextOperation.
 *
 * Gets the nickname string for the #MbimLteAttachContextOperation specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.18
 */
const gchar *mbim_lte_attach_context_operation_get_string (MbimLteAttachContextOperation val);
#endif

#if defined __MBIM_LTE_ATTACH_CONTEXT_OPERATION_IS_FLAGS__
/**
 * mbim_lte_attach_context_operation_build_string_from_mask:
 * @mask: bitmask of MbimLteAttachContextOperation values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimLteAttachContextOperation in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.18
 */
gchar *mbim_lte_attach_context_operation_build_string_from_mask (MbimLteAttachContextOperation mask);
#endif
GType mbim_lte_attach_context_roaming_control_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_LTE_ATTACH_CONTEXT_ROAMING_CONTROL (mbim_lte_attach_context_roaming_control_get_type ())

/* Define type-specific symbols */
#define __MBIM_LTE_ATTACH_CONTEXT_ROAMING_CONTROL_IS_ENUM__

#if defined __MBIM_LTE_ATTACH_CONTEXT_ROAMING_CONTROL_IS_ENUM__
/**
 * mbim_lte_attach_context_roaming_control_get_string:
 * @val: a MbimLteAttachContextRoamingControl.
 *
 * Gets the nickname string for the #MbimLteAttachContextRoamingControl specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.18
 */
const gchar *mbim_lte_attach_context_roaming_control_get_string (MbimLteAttachContextRoamingControl val);
#endif

#if defined __MBIM_LTE_ATTACH_CONTEXT_ROAMING_CONTROL_IS_FLAGS__
/**
 * mbim_lte_attach_context_roaming_control_build_string_from_mask:
 * @mask: bitmask of MbimLteAttachContextRoamingControl values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimLteAttachContextRoamingControl in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.18
 */
gchar *mbim_lte_attach_context_roaming_control_build_string_from_mask (MbimLteAttachContextRoamingControl mask);
#endif
GType mbim_context_source_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CONTEXT_SOURCE (mbim_context_source_get_type ())

/* Define type-specific symbols */
#define __MBIM_CONTEXT_SOURCE_IS_ENUM__

#if defined __MBIM_CONTEXT_SOURCE_IS_ENUM__
/**
 * mbim_context_source_get_string:
 * @val: a MbimContextSource.
 *
 * Gets the nickname string for the #MbimContextSource specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.18
 */
const gchar *mbim_context_source_get_string (MbimContextSource val);
#endif

#if defined __MBIM_CONTEXT_SOURCE_IS_FLAGS__
/**
 * mbim_context_source_build_string_from_mask:
 * @mask: bitmask of MbimContextSource values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimContextSource in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.18
 */
gchar *mbim_context_source_build_string_from_mask (MbimContextSource mask);
#endif
GType mbim_lte_attach_state_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_LTE_ATTACH_STATE (mbim_lte_attach_state_get_type ())

/* Define type-specific symbols */
#define __MBIM_LTE_ATTACH_STATE_IS_ENUM__

#if defined __MBIM_LTE_ATTACH_STATE_IS_ENUM__
/**
 * mbim_lte_attach_state_get_string:
 * @val: a MbimLteAttachState.
 *
 * Gets the nickname string for the #MbimLteAttachState specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.18
 */
const gchar *mbim_lte_attach_state_get_string (MbimLteAttachState val);
#endif

#if defined __MBIM_LTE_ATTACH_STATE_IS_FLAGS__
/**
 * mbim_lte_attach_state_build_string_from_mask:
 * @mask: bitmask of MbimLteAttachState values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimLteAttachState in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.18
 */
gchar *mbim_lte_attach_state_build_string_from_mask (MbimLteAttachState mask);
#endif
GType mbim_sar_control_mode_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_SAR_CONTROL_MODE (mbim_sar_control_mode_get_type ())

/* Define type-specific symbols */
#define __MBIM_SAR_CONTROL_MODE_IS_ENUM__

#if defined __MBIM_SAR_CONTROL_MODE_IS_ENUM__
/**
 * mbim_sar_control_mode_get_string:
 * @val: a MbimSarControlMode.
 *
 * Gets the nickname string for the #MbimSarControlMode specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.26
 */
const gchar *mbim_sar_control_mode_get_string (MbimSarControlMode val);
#endif

#if defined __MBIM_SAR_CONTROL_MODE_IS_FLAGS__
/**
 * mbim_sar_control_mode_build_string_from_mask:
 * @mask: bitmask of MbimSarControlMode values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimSarControlMode in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.26
 */
gchar *mbim_sar_control_mode_build_string_from_mask (MbimSarControlMode mask);
#endif
GType mbim_sar_backoff_state_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_SAR_BACKOFF_STATE (mbim_sar_backoff_state_get_type ())

/* Define type-specific symbols */
#define __MBIM_SAR_BACKOFF_STATE_IS_ENUM__

#if defined __MBIM_SAR_BACKOFF_STATE_IS_ENUM__
/**
 * mbim_sar_backoff_state_get_string:
 * @val: a MbimSarBackoffState.
 *
 * Gets the nickname string for the #MbimSarBackoffState specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.26
 */
const gchar *mbim_sar_backoff_state_get_string (MbimSarBackoffState val);
#endif

#if defined __MBIM_SAR_BACKOFF_STATE_IS_FLAGS__
/**
 * mbim_sar_backoff_state_build_string_from_mask:
 * @mask: bitmask of MbimSarBackoffState values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimSarBackoffState in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.26
 */
gchar *mbim_sar_backoff_state_build_string_from_mask (MbimSarBackoffState mask);
#endif
GType mbim_sar_wifi_hardware_state_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_SAR_WIFI_HARDWARE_STATE (mbim_sar_wifi_hardware_state_get_type ())

/* Define type-specific symbols */
#define __MBIM_SAR_WIFI_HARDWARE_STATE_IS_ENUM__

#if defined __MBIM_SAR_WIFI_HARDWARE_STATE_IS_ENUM__
/**
 * mbim_sar_wifi_hardware_state_get_string:
 * @val: a MbimSarWifiHardwareState.
 *
 * Gets the nickname string for the #MbimSarWifiHardwareState specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.26
 */
const gchar *mbim_sar_wifi_hardware_state_get_string (MbimSarWifiHardwareState val);
#endif

#if defined __MBIM_SAR_WIFI_HARDWARE_STATE_IS_FLAGS__
/**
 * mbim_sar_wifi_hardware_state_build_string_from_mask:
 * @mask: bitmask of MbimSarWifiHardwareState values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimSarWifiHardwareState in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.26
 */
gchar *mbim_sar_wifi_hardware_state_build_string_from_mask (MbimSarWifiHardwareState mask);
#endif
GType mbim_transmission_notification_status_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_TRANSMISSION_NOTIFICATION_STATUS (mbim_transmission_notification_status_get_type ())

/* Define type-specific symbols */
#define __MBIM_TRANSMISSION_NOTIFICATION_STATUS_IS_ENUM__

#if defined __MBIM_TRANSMISSION_NOTIFICATION_STATUS_IS_ENUM__
/**
 * mbim_transmission_notification_status_get_string:
 * @val: a MbimTransmissionNotificationStatus.
 *
 * Gets the nickname string for the #MbimTransmissionNotificationStatus specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.26
 */
const gchar *mbim_transmission_notification_status_get_string (MbimTransmissionNotificationStatus val);
#endif

#if defined __MBIM_TRANSMISSION_NOTIFICATION_STATUS_IS_FLAGS__
/**
 * mbim_transmission_notification_status_build_string_from_mask:
 * @mask: bitmask of MbimTransmissionNotificationStatus values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimTransmissionNotificationStatus in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.26
 */
gchar *mbim_transmission_notification_status_build_string_from_mask (MbimTransmissionNotificationStatus mask);
#endif
GType mbim_transmission_state_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_TRANSMISSION_STATE (mbim_transmission_state_get_type ())

/* Define type-specific symbols */
#define __MBIM_TRANSMISSION_STATE_IS_ENUM__

#if defined __MBIM_TRANSMISSION_STATE_IS_ENUM__
/**
 * mbim_transmission_state_get_string:
 * @val: a MbimTransmissionState.
 *
 * Gets the nickname string for the #MbimTransmissionState specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.26
 */
const gchar *mbim_transmission_state_get_string (MbimTransmissionState val);
#endif

#if defined __MBIM_TRANSMISSION_STATE_IS_FLAGS__
/**
 * mbim_transmission_state_build_string_from_mask:
 * @mask: bitmask of MbimTransmissionState values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimTransmissionState in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.26
 */
gchar *mbim_transmission_state_build_string_from_mask (MbimTransmissionState mask);
#endif
GType mbim_uicc_slot_state_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_UICC_SLOT_STATE (mbim_uicc_slot_state_get_type ())

/* Define type-specific symbols */
#define __MBIM_UICC_SLOT_STATE_IS_ENUM__

#if defined __MBIM_UICC_SLOT_STATE_IS_ENUM__
/**
 * mbim_uicc_slot_state_get_string:
 * @val: a MbimUiccSlotState.
 *
 * Gets the nickname string for the #MbimUiccSlotState specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.26
 */
const gchar *mbim_uicc_slot_state_get_string (MbimUiccSlotState val);
#endif

#if defined __MBIM_UICC_SLOT_STATE_IS_FLAGS__
/**
 * mbim_uicc_slot_state_build_string_from_mask:
 * @mask: bitmask of MbimUiccSlotState values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimUiccSlotState in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.26
 */
gchar *mbim_uicc_slot_state_build_string_from_mask (MbimUiccSlotState mask);
#endif
GType mbim_uicc_secure_messaging_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_UICC_SECURE_MESSAGING (mbim_uicc_secure_messaging_get_type ())

/* Define type-specific symbols */
#define __MBIM_UICC_SECURE_MESSAGING_IS_ENUM__

#if defined __MBIM_UICC_SECURE_MESSAGING_IS_ENUM__
/**
 * mbim_uicc_secure_messaging_get_string:
 * @val: a MbimUiccSecureMessaging.
 *
 * Gets the nickname string for the #MbimUiccSecureMessaging specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.26
 */
const gchar *mbim_uicc_secure_messaging_get_string (MbimUiccSecureMessaging val);
#endif

#if defined __MBIM_UICC_SECURE_MESSAGING_IS_FLAGS__
/**
 * mbim_uicc_secure_messaging_build_string_from_mask:
 * @mask: bitmask of MbimUiccSecureMessaging values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimUiccSecureMessaging in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.26
 */
gchar *mbim_uicc_secure_messaging_build_string_from_mask (MbimUiccSecureMessaging mask);
#endif
GType mbim_uicc_class_byte_type_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_UICC_CLASS_BYTE_TYPE (mbim_uicc_class_byte_type_get_type ())

/* Define type-specific symbols */
#define __MBIM_UICC_CLASS_BYTE_TYPE_IS_ENUM__

#if defined __MBIM_UICC_CLASS_BYTE_TYPE_IS_ENUM__
/**
 * mbim_uicc_class_byte_type_get_string:
 * @val: a MbimUiccClassByteType.
 *
 * Gets the nickname string for the #MbimUiccClassByteType specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.26
 */
const gchar *mbim_uicc_class_byte_type_get_string (MbimUiccClassByteType val);
#endif

#if defined __MBIM_UICC_CLASS_BYTE_TYPE_IS_FLAGS__
/**
 * mbim_uicc_class_byte_type_build_string_from_mask:
 * @mask: bitmask of MbimUiccClassByteType values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimUiccClassByteType in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.26
 */
gchar *mbim_uicc_class_byte_type_build_string_from_mask (MbimUiccClassByteType mask);
#endif
GType mbim_uicc_pass_through_action_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_UICC_PASS_THROUGH_ACTION (mbim_uicc_pass_through_action_get_type ())

/* Define type-specific symbols */
#define __MBIM_UICC_PASS_THROUGH_ACTION_IS_ENUM__

#if defined __MBIM_UICC_PASS_THROUGH_ACTION_IS_ENUM__
/**
 * mbim_uicc_pass_through_action_get_string:
 * @val: a MbimUiccPassThroughAction.
 *
 * Gets the nickname string for the #MbimUiccPassThroughAction specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.26
 */
const gchar *mbim_uicc_pass_through_action_get_string (MbimUiccPassThroughAction val);
#endif

#if defined __MBIM_UICC_PASS_THROUGH_ACTION_IS_FLAGS__
/**
 * mbim_uicc_pass_through_action_build_string_from_mask:
 * @mask: bitmask of MbimUiccPassThroughAction values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimUiccPassThroughAction in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.26
 */
gchar *mbim_uicc_pass_through_action_build_string_from_mask (MbimUiccPassThroughAction mask);
#endif
GType mbim_uicc_pass_through_status_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_UICC_PASS_THROUGH_STATUS (mbim_uicc_pass_through_status_get_type ())

/* Define type-specific symbols */
#define __MBIM_UICC_PASS_THROUGH_STATUS_IS_ENUM__

#if defined __MBIM_UICC_PASS_THROUGH_STATUS_IS_ENUM__
/**
 * mbim_uicc_pass_through_status_get_string:
 * @val: a MbimUiccPassThroughStatus.
 *
 * Gets the nickname string for the #MbimUiccPassThroughStatus specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.26
 */
const gchar *mbim_uicc_pass_through_status_get_string (MbimUiccPassThroughStatus val);
#endif

#if defined __MBIM_UICC_PASS_THROUGH_STATUS_IS_FLAGS__
/**
 * mbim_uicc_pass_through_status_build_string_from_mask:
 * @mask: bitmask of MbimUiccPassThroughStatus values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimUiccPassThroughStatus in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.26
 */
gchar *mbim_uicc_pass_through_status_build_string_from_mask (MbimUiccPassThroughStatus mask);
#endif
GType mbim_modem_configuration_status_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_MODEM_CONFIGURATION_STATUS (mbim_modem_configuration_status_get_type ())

/* Define type-specific symbols */
#define __MBIM_MODEM_CONFIGURATION_STATUS_IS_ENUM__

#if defined __MBIM_MODEM_CONFIGURATION_STATUS_IS_ENUM__
/**
 * mbim_modem_configuration_status_get_string:
 * @val: a MbimModemConfigurationStatus.
 *
 * Gets the nickname string for the #MbimModemConfigurationStatus specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.28
 */
const gchar *mbim_modem_configuration_status_get_string (MbimModemConfigurationStatus val);
#endif

#if defined __MBIM_MODEM_CONFIGURATION_STATUS_IS_FLAGS__
/**
 * mbim_modem_configuration_status_build_string_from_mask:
 * @mask: bitmask of MbimModemConfigurationStatus values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimModemConfigurationStatus in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.28
 */
gchar *mbim_modem_configuration_status_build_string_from_mask (MbimModemConfigurationStatus mask);
#endif
GType mbim_frequency_range_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_FREQUENCY_RANGE (mbim_frequency_range_get_type ())

/* Define type-specific symbols */
#define __MBIM_FREQUENCY_RANGE_IS_FLAGS__

#if defined __MBIM_FREQUENCY_RANGE_IS_ENUM__
/**
 * mbim_frequency_range_get_string:
 * @val: a MbimFrequencyRange.
 *
 * Gets the nickname string for the #MbimFrequencyRange specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.28
 */
const gchar *mbim_frequency_range_get_string (MbimFrequencyRange val);
#endif

#if defined __MBIM_FREQUENCY_RANGE_IS_FLAGS__
/**
 * mbim_frequency_range_build_string_from_mask:
 * @mask: bitmask of MbimFrequencyRange values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimFrequencyRange in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.28
 */
gchar *mbim_frequency_range_build_string_from_mask (MbimFrequencyRange mask);
#endif
GType mbim_context_roaming_control_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CONTEXT_ROAMING_CONTROL (mbim_context_roaming_control_get_type ())

/* Define type-specific symbols */
#define __MBIM_CONTEXT_ROAMING_CONTROL_IS_ENUM__

#if defined __MBIM_CONTEXT_ROAMING_CONTROL_IS_ENUM__
/**
 * mbim_context_roaming_control_get_string:
 * @val: a MbimContextRoamingControl.
 *
 * Gets the nickname string for the #MbimContextRoamingControl specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.28
 */
const gchar *mbim_context_roaming_control_get_string (MbimContextRoamingControl val);
#endif

#if defined __MBIM_CONTEXT_ROAMING_CONTROL_IS_FLAGS__
/**
 * mbim_context_roaming_control_build_string_from_mask:
 * @mask: bitmask of MbimContextRoamingControl values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimContextRoamingControl in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.28
 */
gchar *mbim_context_roaming_control_build_string_from_mask (MbimContextRoamingControl mask);
#endif
GType mbim_context_media_type_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CONTEXT_MEDIA_TYPE (mbim_context_media_type_get_type ())

/* Define type-specific symbols */
#define __MBIM_CONTEXT_MEDIA_TYPE_IS_ENUM__

#if defined __MBIM_CONTEXT_MEDIA_TYPE_IS_ENUM__
/**
 * mbim_context_media_type_get_string:
 * @val: a MbimContextMediaType.
 *
 * Gets the nickname string for the #MbimContextMediaType specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.28
 */
const gchar *mbim_context_media_type_get_string (MbimContextMediaType val);
#endif

#if defined __MBIM_CONTEXT_MEDIA_TYPE_IS_FLAGS__
/**
 * mbim_context_media_type_build_string_from_mask:
 * @mask: bitmask of MbimContextMediaType values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimContextMediaType in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.28
 */
gchar *mbim_context_media_type_build_string_from_mask (MbimContextMediaType mask);
#endif
GType mbim_context_state_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CONTEXT_STATE (mbim_context_state_get_type ())

/* Define type-specific symbols */
#define __MBIM_CONTEXT_STATE_IS_ENUM__

#if defined __MBIM_CONTEXT_STATE_IS_ENUM__
/**
 * mbim_context_state_get_string:
 * @val: a MbimContextState.
 *
 * Gets the nickname string for the #MbimContextState specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.28
 */
const gchar *mbim_context_state_get_string (MbimContextState val);
#endif

#if defined __MBIM_CONTEXT_STATE_IS_FLAGS__
/**
 * mbim_context_state_build_string_from_mask:
 * @mask: bitmask of MbimContextState values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimContextState in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.28
 */
gchar *mbim_context_state_build_string_from_mask (MbimContextState mask);
#endif
GType mbim_context_operation_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CONTEXT_OPERATION (mbim_context_operation_get_type ())

/* Define type-specific symbols */
#define __MBIM_CONTEXT_OPERATION_IS_ENUM__

#if defined __MBIM_CONTEXT_OPERATION_IS_ENUM__
/**
 * mbim_context_operation_get_string:
 * @val: a MbimContextOperation.
 *
 * Gets the nickname string for the #MbimContextOperation specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.28
 */
const gchar *mbim_context_operation_get_string (MbimContextOperation val);
#endif

#if defined __MBIM_CONTEXT_OPERATION_IS_FLAGS__
/**
 * mbim_context_operation_build_string_from_mask:
 * @mask: bitmask of MbimContextOperation values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimContextOperation in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.28
 */
gchar *mbim_context_operation_build_string_from_mask (MbimContextOperation mask);
#endif
GType mbim_mico_mode_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_MICO_MODE (mbim_mico_mode_get_type ())

/* Define type-specific symbols */
#define __MBIM_MICO_MODE_IS_ENUM__

#if defined __MBIM_MICO_MODE_IS_ENUM__
/**
 * mbim_mico_mode_get_string:
 * @val: a MbimMicoMode.
 *
 * Gets the nickname string for the #MbimMicoMode specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.28
 */
const gchar *mbim_mico_mode_get_string (MbimMicoMode val);
#endif

#if defined __MBIM_MICO_MODE_IS_FLAGS__
/**
 * mbim_mico_mode_build_string_from_mask:
 * @mask: bitmask of MbimMicoMode values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimMicoMode in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.28
 */
gchar *mbim_mico_mode_build_string_from_mask (MbimMicoMode mask);
#endif
GType mbim_default_pdu_activation_hint_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_DEFAULT_PDU_ACTIVATION_HINT (mbim_default_pdu_activation_hint_get_type ())

/* Define type-specific symbols */
#define __MBIM_DEFAULT_PDU_ACTIVATION_HINT_IS_ENUM__

#if defined __MBIM_DEFAULT_PDU_ACTIVATION_HINT_IS_ENUM__
/**
 * mbim_default_pdu_activation_hint_get_string:
 * @val: a MbimDefaultPduActivationHint.
 *
 * Gets the nickname string for the #MbimDefaultPduActivationHint specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.28
 */
const gchar *mbim_default_pdu_activation_hint_get_string (MbimDefaultPduActivationHint val);
#endif

#if defined __MBIM_DEFAULT_PDU_ACTIVATION_HINT_IS_FLAGS__
/**
 * mbim_default_pdu_activation_hint_build_string_from_mask:
 * @mask: bitmask of MbimDefaultPduActivationHint values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimDefaultPduActivationHint in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.28
 */
gchar *mbim_default_pdu_activation_hint_build_string_from_mask (MbimDefaultPduActivationHint mask);
#endif
GType mbim_ladn_info_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_LADN_INFO (mbim_ladn_info_get_type ())

/* Define type-specific symbols */
#define __MBIM_LADN_INFO_IS_ENUM__

#if defined __MBIM_LADN_INFO_IS_ENUM__
/**
 * mbim_ladn_info_get_string:
 * @val: a MbimLadnInfo.
 *
 * Gets the nickname string for the #MbimLadnInfo specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.28
 */
const gchar *mbim_ladn_info_get_string (MbimLadnInfo val);
#endif

#if defined __MBIM_LADN_INFO_IS_FLAGS__
/**
 * mbim_ladn_info_build_string_from_mask:
 * @mask: bitmask of MbimLadnInfo values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimLadnInfo in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.28
 */
gchar *mbim_ladn_info_build_string_from_mask (MbimLadnInfo mask);
#endif
GType mbim_drx_cycle_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_DRX_CYCLE (mbim_drx_cycle_get_type ())

/* Define type-specific symbols */
#define __MBIM_DRX_CYCLE_IS_ENUM__

#if defined __MBIM_DRX_CYCLE_IS_ENUM__
/**
 * mbim_drx_cycle_get_string:
 * @val: a MbimDrxCycle.
 *
 * Gets the nickname string for the #MbimDrxCycle specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.28
 */
const gchar *mbim_drx_cycle_get_string (MbimDrxCycle val);
#endif

#if defined __MBIM_DRX_CYCLE_IS_FLAGS__
/**
 * mbim_drx_cycle_build_string_from_mask:
 * @mask: bitmask of MbimDrxCycle values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimDrxCycle in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.28
 */
gchar *mbim_drx_cycle_build_string_from_mask (MbimDrxCycle mask);
#endif
GType mbim_subscriber_ready_status_flag_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_SUBSCRIBER_READY_STATUS_FLAG (mbim_subscriber_ready_status_flag_get_type ())

/* Define type-specific symbols */
#define __MBIM_SUBSCRIBER_READY_STATUS_FLAG_IS_FLAGS__

#if defined __MBIM_SUBSCRIBER_READY_STATUS_FLAG_IS_ENUM__
/**
 * mbim_subscriber_ready_status_flag_get_string:
 * @val: a MbimSubscriberReadyStatusFlag.
 *
 * Gets the nickname string for the #MbimSubscriberReadyStatusFlag specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.28
 */
const gchar *mbim_subscriber_ready_status_flag_get_string (MbimSubscriberReadyStatusFlag val);
#endif

#if defined __MBIM_SUBSCRIBER_READY_STATUS_FLAG_IS_FLAGS__
/**
 * mbim_subscriber_ready_status_flag_build_string_from_mask:
 * @mask: bitmask of MbimSubscriberReadyStatusFlag values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimSubscriberReadyStatusFlag in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.28
 */
gchar *mbim_subscriber_ready_status_flag_build_string_from_mask (MbimSubscriberReadyStatusFlag mask);
#endif
GType mbim_data_class_v3_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_DATA_CLASS_V3 (mbim_data_class_v3_get_type ())

/* Define type-specific symbols */
#define __MBIM_DATA_CLASS_V3_IS_FLAGS__

#if defined __MBIM_DATA_CLASS_V3_IS_ENUM__
/**
 * mbim_data_class_v3_get_string:
 * @val: a MbimDataClassV3.
 *
 * Gets the nickname string for the #MbimDataClassV3 specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.28
 */
const gchar *mbim_data_class_v3_get_string (MbimDataClassV3 val);
#endif

#if defined __MBIM_DATA_CLASS_V3_IS_FLAGS__
/**
 * mbim_data_class_v3_build_string_from_mask:
 * @mask: bitmask of MbimDataClassV3 values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimDataClassV3 in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.28
 */
gchar *mbim_data_class_v3_build_string_from_mask (MbimDataClassV3 mask);
#endif
GType mbim_data_subclass_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_DATA_SUBCLASS (mbim_data_subclass_get_type ())

/* Define type-specific symbols */
#define __MBIM_DATA_SUBCLASS_IS_FLAGS__

#if defined __MBIM_DATA_SUBCLASS_IS_ENUM__
/**
 * mbim_data_subclass_get_string:
 * @val: a MbimDataSubclass.
 *
 * Gets the nickname string for the #MbimDataSubclass specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.28
 */
const gchar *mbim_data_subclass_get_string (MbimDataSubclass val);
#endif

#if defined __MBIM_DATA_SUBCLASS_IS_FLAGS__
/**
 * mbim_data_subclass_build_string_from_mask:
 * @mask: bitmask of MbimDataSubclass values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimDataSubclass in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.28
 */
gchar *mbim_data_subclass_build_string_from_mask (MbimDataSubclass mask);
#endif
GType mbim_quectel_radio_switch_state_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_QUECTEL_RADIO_SWITCH_STATE (mbim_quectel_radio_switch_state_get_type ())

/* Define type-specific symbols */
#define __MBIM_QUECTEL_RADIO_SWITCH_STATE_IS_ENUM__

#if defined __MBIM_QUECTEL_RADIO_SWITCH_STATE_IS_ENUM__
/**
 * mbim_quectel_radio_switch_state_get_string:
 * @val: a MbimQuectelRadioSwitchState.
 *
 * Gets the nickname string for the #MbimQuectelRadioSwitchState specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.26.2
 */
const gchar *mbim_quectel_radio_switch_state_get_string (MbimQuectelRadioSwitchState val);
#endif

#if defined __MBIM_QUECTEL_RADIO_SWITCH_STATE_IS_FLAGS__
/**
 * mbim_quectel_radio_switch_state_build_string_from_mask:
 * @mask: bitmask of MbimQuectelRadioSwitchState values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimQuectelRadioSwitchState in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.26.2
 */
gchar *mbim_quectel_radio_switch_state_build_string_from_mask (MbimQuectelRadioSwitchState mask);
#endif
GType mbim_intel_serving_cell_info_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_INTEL_SERVING_CELL_INFO (mbim_intel_serving_cell_info_get_type ())

/* Define type-specific symbols */
#define __MBIM_INTEL_SERVING_CELL_INFO_IS_ENUM__

#if defined __MBIM_INTEL_SERVING_CELL_INFO_IS_ENUM__
/**
 * mbim_intel_serving_cell_info_get_string:
 * @val: a MbimIntelServingCellInfo.
 *
 * Gets the nickname string for the #MbimIntelServingCellInfo specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.28
 */
const gchar *mbim_intel_serving_cell_info_get_string (MbimIntelServingCellInfo val);
#endif

#if defined __MBIM_INTEL_SERVING_CELL_INFO_IS_FLAGS__
/**
 * mbim_intel_serving_cell_info_build_string_from_mask:
 * @mask: bitmask of MbimIntelServingCellInfo values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimIntelServingCellInfo in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.28
 */
gchar *mbim_intel_serving_cell_info_build_string_from_mask (MbimIntelServingCellInfo mask);
#endif
GType mbim_intel_boot_mode_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_INTEL_BOOT_MODE (mbim_intel_boot_mode_get_type ())

/* Define type-specific symbols */
#define __MBIM_INTEL_BOOT_MODE_IS_ENUM__

#if defined __MBIM_INTEL_BOOT_MODE_IS_ENUM__
/**
 * mbim_intel_boot_mode_get_string:
 * @val: a MbimIntelBootMode.
 *
 * Gets the nickname string for the #MbimIntelBootMode specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.28
 */
const gchar *mbim_intel_boot_mode_get_string (MbimIntelBootMode val);
#endif

#if defined __MBIM_INTEL_BOOT_MODE_IS_FLAGS__
/**
 * mbim_intel_boot_mode_build_string_from_mask:
 * @mask: bitmask of MbimIntelBootMode values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimIntelBootMode in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.28
 */
gchar *mbim_intel_boot_mode_build_string_from_mask (MbimIntelBootMode mask);
#endif
GType mbim_uicc_application_type_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_UICC_APPLICATION_TYPE (mbim_uicc_application_type_get_type ())

/* Define type-specific symbols */
#define __MBIM_UICC_APPLICATION_TYPE_IS_ENUM__

#if defined __MBIM_UICC_APPLICATION_TYPE_IS_ENUM__
/**
 * mbim_uicc_application_type_get_string:
 * @val: a MbimUiccApplicationType.
 *
 * Gets the nickname string for the #MbimUiccApplicationType specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.28
 */
const gchar *mbim_uicc_application_type_get_string (MbimUiccApplicationType val);
#endif

#if defined __MBIM_UICC_APPLICATION_TYPE_IS_FLAGS__
/**
 * mbim_uicc_application_type_build_string_from_mask:
 * @mask: bitmask of MbimUiccApplicationType values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimUiccApplicationType in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.28
 */
gchar *mbim_uicc_application_type_build_string_from_mask (MbimUiccApplicationType mask);
#endif
GType mbim_uicc_file_accessibility_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_UICC_FILE_ACCESSIBILITY (mbim_uicc_file_accessibility_get_type ())

/* Define type-specific symbols */
#define __MBIM_UICC_FILE_ACCESSIBILITY_IS_ENUM__

#if defined __MBIM_UICC_FILE_ACCESSIBILITY_IS_ENUM__
/**
 * mbim_uicc_file_accessibility_get_string:
 * @val: a MbimUiccFileAccessibility.
 *
 * Gets the nickname string for the #MbimUiccFileAccessibility specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.28
 */
const gchar *mbim_uicc_file_accessibility_get_string (MbimUiccFileAccessibility val);
#endif

#if defined __MBIM_UICC_FILE_ACCESSIBILITY_IS_FLAGS__
/**
 * mbim_uicc_file_accessibility_build_string_from_mask:
 * @mask: bitmask of MbimUiccFileAccessibility values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimUiccFileAccessibility in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.28
 */
gchar *mbim_uicc_file_accessibility_build_string_from_mask (MbimUiccFileAccessibility mask);
#endif
GType mbim_uicc_file_type_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_UICC_FILE_TYPE (mbim_uicc_file_type_get_type ())

/* Define type-specific symbols */
#define __MBIM_UICC_FILE_TYPE_IS_ENUM__

#if defined __MBIM_UICC_FILE_TYPE_IS_ENUM__
/**
 * mbim_uicc_file_type_get_string:
 * @val: a MbimUiccFileType.
 *
 * Gets the nickname string for the #MbimUiccFileType specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.28
 */
const gchar *mbim_uicc_file_type_get_string (MbimUiccFileType val);
#endif

#if defined __MBIM_UICC_FILE_TYPE_IS_FLAGS__
/**
 * mbim_uicc_file_type_build_string_from_mask:
 * @mask: bitmask of MbimUiccFileType values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimUiccFileType in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.28
 */
gchar *mbim_uicc_file_type_build_string_from_mask (MbimUiccFileType mask);
#endif
GType mbim_uicc_file_structure_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_UICC_FILE_STRUCTURE (mbim_uicc_file_structure_get_type ())

/* Define type-specific symbols */
#define __MBIM_UICC_FILE_STRUCTURE_IS_ENUM__

#if defined __MBIM_UICC_FILE_STRUCTURE_IS_ENUM__
/**
 * mbim_uicc_file_structure_get_string:
 * @val: a MbimUiccFileStructure.
 *
 * Gets the nickname string for the #MbimUiccFileStructure specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.28
 */
const gchar *mbim_uicc_file_structure_get_string (MbimUiccFileStructure val);
#endif

#if defined __MBIM_UICC_FILE_STRUCTURE_IS_FLAGS__
/**
 * mbim_uicc_file_structure_build_string_from_mask:
 * @mask: bitmask of MbimUiccFileStructure values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimUiccFileStructure in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.28
 */
gchar *mbim_uicc_file_structure_build_string_from_mask (MbimUiccFileStructure mask);
#endif

/* enumerations from "../libmbim/src/libmbim-glib/mbim-message.h" */
GType mbim_message_type_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_MESSAGE_TYPE (mbim_message_type_get_type ())

/* Define type-specific symbols */
#define __MBIM_MESSAGE_TYPE_IS_ENUM__

#if defined __MBIM_MESSAGE_TYPE_IS_ENUM__
/**
 * mbim_message_type_get_string:
 * @val: a MbimMessageType.
 *
 * Gets the nickname string for the #MbimMessageType specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_message_type_get_string (MbimMessageType val);
#endif

#if defined __MBIM_MESSAGE_TYPE_IS_FLAGS__
/**
 * mbim_message_type_build_string_from_mask:
 * @mask: bitmask of MbimMessageType values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimMessageType in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_message_type_build_string_from_mask (MbimMessageType mask);
#endif
GType mbim_message_command_type_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_MESSAGE_COMMAND_TYPE (mbim_message_command_type_get_type ())

/* Define type-specific symbols */
#define __MBIM_MESSAGE_COMMAND_TYPE_IS_ENUM__

#if defined __MBIM_MESSAGE_COMMAND_TYPE_IS_ENUM__
/**
 * mbim_message_command_type_get_string:
 * @val: a MbimMessageCommandType.
 *
 * Gets the nickname string for the #MbimMessageCommandType specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_message_command_type_get_string (MbimMessageCommandType val);
#endif

#if defined __MBIM_MESSAGE_COMMAND_TYPE_IS_FLAGS__
/**
 * mbim_message_command_type_build_string_from_mask:
 * @mask: bitmask of MbimMessageCommandType values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimMessageCommandType in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_message_command_type_build_string_from_mask (MbimMessageCommandType mask);
#endif

/* enumerations from "../libmbim/src/libmbim-glib/mbim-tlv.h" */
GType mbim_tlv_type_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_TLV_TYPE (mbim_tlv_type_get_type ())

/* Define type-specific symbols */
#define __MBIM_TLV_TYPE_IS_ENUM__

#if defined __MBIM_TLV_TYPE_IS_ENUM__
/**
 * mbim_tlv_type_get_string:
 * @val: a MbimTlvType.
 *
 * Gets the nickname string for the #MbimTlvType specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.28
 */
const gchar *mbim_tlv_type_get_string (MbimTlvType val);
#endif

#if defined __MBIM_TLV_TYPE_IS_FLAGS__
/**
 * mbim_tlv_type_build_string_from_mask:
 * @mask: bitmask of MbimTlvType values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimTlvType in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.28
 */
gchar *mbim_tlv_type_build_string_from_mask (MbimTlvType mask);
#endif

/* enumerations from "../libmbim/src/libmbim-glib/mbim-uuid.h" */
GType mbim_service_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_SERVICE (mbim_service_get_type ())

/* Define type-specific symbols */
#define __MBIM_SERVICE_IS_ENUM__

#if defined __MBIM_SERVICE_IS_ENUM__
/**
 * mbim_service_get_string:
 * @val: a MbimService.
 *
 * Gets the nickname string for the #MbimService specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_service_get_string (MbimService val);
#endif

#if defined __MBIM_SERVICE_IS_FLAGS__
/**
 * mbim_service_build_string_from_mask:
 * @mask: bitmask of MbimService values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimService in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_service_build_string_from_mask (MbimService mask);
#endif
GType mbim_context_type_get_type (void) G_GNUC_CONST;
#define MBIM_TYPE_CONTEXT_TYPE (mbim_context_type_get_type ())

/* Define type-specific symbols */
#define __MBIM_CONTEXT_TYPE_IS_ENUM__

#if defined __MBIM_CONTEXT_TYPE_IS_ENUM__
/**
 * mbim_context_type_get_string:
 * @val: a MbimContextType.
 *
 * Gets the nickname string for the #MbimContextType specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 *
 * Since: 1.0
 */
const gchar *mbim_context_type_get_string (MbimContextType val);
#endif

#if defined __MBIM_CONTEXT_TYPE_IS_FLAGS__
/**
 * mbim_context_type_build_string_from_mask:
 * @mask: bitmask of MbimContextType values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #MbimContextType in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 *
 * Since: 1.0
 */
gchar *mbim_context_type_build_string_from_mask (MbimContextType mask);
#endif
G_END_DECLS

#endif /* __LIBMBIM_GLIB_ENUM_TYPES_H__ */

/* Generated data ends here */

