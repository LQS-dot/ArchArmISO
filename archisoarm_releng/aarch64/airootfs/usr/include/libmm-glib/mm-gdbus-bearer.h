/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __MM_GDBUS_BEARER_H__
#define __MM_GDBUS_BEARER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.ModemManager1.Bearer */

#define MM_GDBUS_TYPE_BEARER (mm_gdbus_bearer_get_type ())
#define MM_GDBUS_BEARER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MM_GDBUS_TYPE_BEARER, MmGdbusBearer))
#define MM_GDBUS_IS_BEARER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MM_GDBUS_TYPE_BEARER))
#define MM_GDBUS_BEARER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), MM_GDBUS_TYPE_BEARER, MmGdbusBearerIface))

struct _MmGdbusBearer;
typedef struct _MmGdbusBearer MmGdbusBearer;
typedef struct _MmGdbusBearerIface MmGdbusBearerIface;

struct _MmGdbusBearerIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_connect) (
    MmGdbusBearer *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_disconnect) (
    MmGdbusBearer *object,
    GDBusMethodInvocation *invocation);

  guint  (*get_bearer_type) (MmGdbusBearer *object);

  gboolean  (*get_connected) (MmGdbusBearer *object);

  GVariant * (*get_connection_error) (MmGdbusBearer *object);

  const gchar * (*get_interface) (MmGdbusBearer *object);

  GVariant * (*get_ip4_config) (MmGdbusBearer *object);

  GVariant * (*get_ip6_config) (MmGdbusBearer *object);

  guint  (*get_ip_timeout) (MmGdbusBearer *object);

  gboolean  (*get_multiplexed) (MmGdbusBearer *object);

  gint  (*get_profile_id) (MmGdbusBearer *object);

  GVariant * (*get_properties) (MmGdbusBearer *object);

  gboolean  (*get_reload_stats_supported) (MmGdbusBearer *object);

  GVariant * (*get_stats) (MmGdbusBearer *object);

  gboolean  (*get_suspended) (MmGdbusBearer *object);

};

GType mm_gdbus_bearer_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *mm_gdbus_bearer_interface_info (void);
guint mm_gdbus_bearer_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void mm_gdbus_bearer_complete_connect (
    MmGdbusBearer *object,
    GDBusMethodInvocation *invocation);

void mm_gdbus_bearer_complete_disconnect (
    MmGdbusBearer *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void mm_gdbus_bearer_call_connect (
    MmGdbusBearer *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean mm_gdbus_bearer_call_connect_finish (
    MmGdbusBearer *proxy,
    GAsyncResult *res,
    GError **error);

gboolean mm_gdbus_bearer_call_connect_sync (
    MmGdbusBearer *proxy,
    GCancellable *cancellable,
    GError **error);

void mm_gdbus_bearer_call_disconnect (
    MmGdbusBearer *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean mm_gdbus_bearer_call_disconnect_finish (
    MmGdbusBearer *proxy,
    GAsyncResult *res,
    GError **error);

gboolean mm_gdbus_bearer_call_disconnect_sync (
    MmGdbusBearer *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *mm_gdbus_bearer_get_interface (MmGdbusBearer *object);
gchar *mm_gdbus_bearer_dup_interface (MmGdbusBearer *object);
void mm_gdbus_bearer_set_interface (MmGdbusBearer *object, const gchar *value);

gboolean mm_gdbus_bearer_get_connected (MmGdbusBearer *object);
void mm_gdbus_bearer_set_connected (MmGdbusBearer *object, gboolean value);

GVariant *mm_gdbus_bearer_get_connection_error (MmGdbusBearer *object);
GVariant *mm_gdbus_bearer_dup_connection_error (MmGdbusBearer *object);
void mm_gdbus_bearer_set_connection_error (MmGdbusBearer *object, GVariant *value);

gboolean mm_gdbus_bearer_get_suspended (MmGdbusBearer *object);
void mm_gdbus_bearer_set_suspended (MmGdbusBearer *object, gboolean value);

gboolean mm_gdbus_bearer_get_multiplexed (MmGdbusBearer *object);
void mm_gdbus_bearer_set_multiplexed (MmGdbusBearer *object, gboolean value);

GVariant *mm_gdbus_bearer_get_ip4_config (MmGdbusBearer *object);
GVariant *mm_gdbus_bearer_dup_ip4_config (MmGdbusBearer *object);
void mm_gdbus_bearer_set_ip4_config (MmGdbusBearer *object, GVariant *value);

GVariant *mm_gdbus_bearer_get_ip6_config (MmGdbusBearer *object);
GVariant *mm_gdbus_bearer_dup_ip6_config (MmGdbusBearer *object);
void mm_gdbus_bearer_set_ip6_config (MmGdbusBearer *object, GVariant *value);

GVariant *mm_gdbus_bearer_get_stats (MmGdbusBearer *object);
GVariant *mm_gdbus_bearer_dup_stats (MmGdbusBearer *object);
void mm_gdbus_bearer_set_stats (MmGdbusBearer *object, GVariant *value);

gboolean mm_gdbus_bearer_get_reload_stats_supported (MmGdbusBearer *object);
void mm_gdbus_bearer_set_reload_stats_supported (MmGdbusBearer *object, gboolean value);

guint mm_gdbus_bearer_get_ip_timeout (MmGdbusBearer *object);
void mm_gdbus_bearer_set_ip_timeout (MmGdbusBearer *object, guint value);

guint mm_gdbus_bearer_get_bearer_type (MmGdbusBearer *object);
void mm_gdbus_bearer_set_bearer_type (MmGdbusBearer *object, guint value);

gint mm_gdbus_bearer_get_profile_id (MmGdbusBearer *object);
void mm_gdbus_bearer_set_profile_id (MmGdbusBearer *object, gint value);

GVariant *mm_gdbus_bearer_get_properties (MmGdbusBearer *object);
GVariant *mm_gdbus_bearer_dup_properties (MmGdbusBearer *object);
void mm_gdbus_bearer_set_properties (MmGdbusBearer *object, GVariant *value);


/* ---- */

#define MM_GDBUS_TYPE_BEARER_PROXY (mm_gdbus_bearer_proxy_get_type ())
#define MM_GDBUS_BEARER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MM_GDBUS_TYPE_BEARER_PROXY, MmGdbusBearerProxy))
#define MM_GDBUS_BEARER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), MM_GDBUS_TYPE_BEARER_PROXY, MmGdbusBearerProxyClass))
#define MM_GDBUS_BEARER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), MM_GDBUS_TYPE_BEARER_PROXY, MmGdbusBearerProxyClass))
#define MM_GDBUS_IS_BEARER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MM_GDBUS_TYPE_BEARER_PROXY))
#define MM_GDBUS_IS_BEARER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), MM_GDBUS_TYPE_BEARER_PROXY))

typedef struct _MmGdbusBearerProxy MmGdbusBearerProxy;
typedef struct _MmGdbusBearerProxyClass MmGdbusBearerProxyClass;
typedef struct _MmGdbusBearerProxyPrivate MmGdbusBearerProxyPrivate;

struct _MmGdbusBearerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  MmGdbusBearerProxyPrivate *priv;
};

struct _MmGdbusBearerProxyClass
{
  GDBusProxyClass parent_class;
};

GType mm_gdbus_bearer_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MmGdbusBearerProxy, g_object_unref)
#endif

void mm_gdbus_bearer_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
MmGdbusBearer *mm_gdbus_bearer_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
MmGdbusBearer *mm_gdbus_bearer_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void mm_gdbus_bearer_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
MmGdbusBearer *mm_gdbus_bearer_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
MmGdbusBearer *mm_gdbus_bearer_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define MM_GDBUS_TYPE_BEARER_SKELETON (mm_gdbus_bearer_skeleton_get_type ())
#define MM_GDBUS_BEARER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MM_GDBUS_TYPE_BEARER_SKELETON, MmGdbusBearerSkeleton))
#define MM_GDBUS_BEARER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), MM_GDBUS_TYPE_BEARER_SKELETON, MmGdbusBearerSkeletonClass))
#define MM_GDBUS_BEARER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), MM_GDBUS_TYPE_BEARER_SKELETON, MmGdbusBearerSkeletonClass))
#define MM_GDBUS_IS_BEARER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MM_GDBUS_TYPE_BEARER_SKELETON))
#define MM_GDBUS_IS_BEARER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), MM_GDBUS_TYPE_BEARER_SKELETON))

typedef struct _MmGdbusBearerSkeleton MmGdbusBearerSkeleton;
typedef struct _MmGdbusBearerSkeletonClass MmGdbusBearerSkeletonClass;
typedef struct _MmGdbusBearerSkeletonPrivate MmGdbusBearerSkeletonPrivate;

struct _MmGdbusBearerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  MmGdbusBearerSkeletonPrivate *priv;
};

struct _MmGdbusBearerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType mm_gdbus_bearer_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MmGdbusBearerSkeleton, g_object_unref)
#endif

MmGdbusBearer *mm_gdbus_bearer_skeleton_new (void);


G_END_DECLS

#endif /* __MM_GDBUS_BEARER_H__ */
