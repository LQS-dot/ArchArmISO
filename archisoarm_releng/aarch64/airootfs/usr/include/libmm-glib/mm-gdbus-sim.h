/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __MM_GDBUS_SIM_H__
#define __MM_GDBUS_SIM_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.ModemManager1.Sim */

#define MM_GDBUS_TYPE_SIM (mm_gdbus_sim_get_type ())
#define MM_GDBUS_SIM(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MM_GDBUS_TYPE_SIM, MmGdbusSim))
#define MM_GDBUS_IS_SIM(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MM_GDBUS_TYPE_SIM))
#define MM_GDBUS_SIM_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), MM_GDBUS_TYPE_SIM, MmGdbusSimIface))

struct _MmGdbusSim;
typedef struct _MmGdbusSim MmGdbusSim;
typedef struct _MmGdbusSimIface MmGdbusSimIface;

struct _MmGdbusSimIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_change_pin) (
    MmGdbusSim *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_old_pin,
    const gchar *arg_new_pin);

  gboolean (*handle_enable_pin) (
    MmGdbusSim *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_pin,
    gboolean arg_enabled);

  gboolean (*handle_send_pin) (
    MmGdbusSim *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_pin);

  gboolean (*handle_send_puk) (
    MmGdbusSim *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_puk,
    const gchar *arg_pin);

  gboolean (*handle_set_preferred_networks) (
    MmGdbusSim *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_preferred_networks);

  gboolean  (*get_active) (MmGdbusSim *object);

  const gchar * (*get_eid) (MmGdbusSim *object);

  const gchar *const * (*get_emergency_numbers) (MmGdbusSim *object);

  guint  (*get_esim_status) (MmGdbusSim *object);

  GVariant * (*get_gid1) (MmGdbusSim *object);

  GVariant * (*get_gid2) (MmGdbusSim *object);

  const gchar * (*get_imsi) (MmGdbusSim *object);

  const gchar * (*get_operator_identifier) (MmGdbusSim *object);

  const gchar * (*get_operator_name) (MmGdbusSim *object);

  GVariant * (*get_preferred_networks) (MmGdbusSim *object);

  guint  (*get_removability) (MmGdbusSim *object);

  const gchar * (*get_sim_identifier) (MmGdbusSim *object);

  guint  (*get_sim_type) (MmGdbusSim *object);

};

GType mm_gdbus_sim_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *mm_gdbus_sim_interface_info (void);
guint mm_gdbus_sim_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void mm_gdbus_sim_complete_send_pin (
    MmGdbusSim *object,
    GDBusMethodInvocation *invocation);

void mm_gdbus_sim_complete_send_puk (
    MmGdbusSim *object,
    GDBusMethodInvocation *invocation);

void mm_gdbus_sim_complete_enable_pin (
    MmGdbusSim *object,
    GDBusMethodInvocation *invocation);

void mm_gdbus_sim_complete_change_pin (
    MmGdbusSim *object,
    GDBusMethodInvocation *invocation);

void mm_gdbus_sim_complete_set_preferred_networks (
    MmGdbusSim *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void mm_gdbus_sim_call_send_pin (
    MmGdbusSim *proxy,
    const gchar *arg_pin,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean mm_gdbus_sim_call_send_pin_finish (
    MmGdbusSim *proxy,
    GAsyncResult *res,
    GError **error);

gboolean mm_gdbus_sim_call_send_pin_sync (
    MmGdbusSim *proxy,
    const gchar *arg_pin,
    GCancellable *cancellable,
    GError **error);

void mm_gdbus_sim_call_send_puk (
    MmGdbusSim *proxy,
    const gchar *arg_puk,
    const gchar *arg_pin,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean mm_gdbus_sim_call_send_puk_finish (
    MmGdbusSim *proxy,
    GAsyncResult *res,
    GError **error);

gboolean mm_gdbus_sim_call_send_puk_sync (
    MmGdbusSim *proxy,
    const gchar *arg_puk,
    const gchar *arg_pin,
    GCancellable *cancellable,
    GError **error);

void mm_gdbus_sim_call_enable_pin (
    MmGdbusSim *proxy,
    const gchar *arg_pin,
    gboolean arg_enabled,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean mm_gdbus_sim_call_enable_pin_finish (
    MmGdbusSim *proxy,
    GAsyncResult *res,
    GError **error);

gboolean mm_gdbus_sim_call_enable_pin_sync (
    MmGdbusSim *proxy,
    const gchar *arg_pin,
    gboolean arg_enabled,
    GCancellable *cancellable,
    GError **error);

void mm_gdbus_sim_call_change_pin (
    MmGdbusSim *proxy,
    const gchar *arg_old_pin,
    const gchar *arg_new_pin,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean mm_gdbus_sim_call_change_pin_finish (
    MmGdbusSim *proxy,
    GAsyncResult *res,
    GError **error);

gboolean mm_gdbus_sim_call_change_pin_sync (
    MmGdbusSim *proxy,
    const gchar *arg_old_pin,
    const gchar *arg_new_pin,
    GCancellable *cancellable,
    GError **error);

void mm_gdbus_sim_call_set_preferred_networks (
    MmGdbusSim *proxy,
    GVariant *arg_preferred_networks,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean mm_gdbus_sim_call_set_preferred_networks_finish (
    MmGdbusSim *proxy,
    GAsyncResult *res,
    GError **error);

gboolean mm_gdbus_sim_call_set_preferred_networks_sync (
    MmGdbusSim *proxy,
    GVariant *arg_preferred_networks,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean mm_gdbus_sim_get_active (MmGdbusSim *object);
void mm_gdbus_sim_set_active (MmGdbusSim *object, gboolean value);

const gchar *mm_gdbus_sim_get_sim_identifier (MmGdbusSim *object);
gchar *mm_gdbus_sim_dup_sim_identifier (MmGdbusSim *object);
void mm_gdbus_sim_set_sim_identifier (MmGdbusSim *object, const gchar *value);

const gchar *mm_gdbus_sim_get_imsi (MmGdbusSim *object);
gchar *mm_gdbus_sim_dup_imsi (MmGdbusSim *object);
void mm_gdbus_sim_set_imsi (MmGdbusSim *object, const gchar *value);

const gchar *mm_gdbus_sim_get_eid (MmGdbusSim *object);
gchar *mm_gdbus_sim_dup_eid (MmGdbusSim *object);
void mm_gdbus_sim_set_eid (MmGdbusSim *object, const gchar *value);

const gchar *mm_gdbus_sim_get_operator_identifier (MmGdbusSim *object);
gchar *mm_gdbus_sim_dup_operator_identifier (MmGdbusSim *object);
void mm_gdbus_sim_set_operator_identifier (MmGdbusSim *object, const gchar *value);

const gchar *mm_gdbus_sim_get_operator_name (MmGdbusSim *object);
gchar *mm_gdbus_sim_dup_operator_name (MmGdbusSim *object);
void mm_gdbus_sim_set_operator_name (MmGdbusSim *object, const gchar *value);

const gchar *const *mm_gdbus_sim_get_emergency_numbers (MmGdbusSim *object);
gchar **mm_gdbus_sim_dup_emergency_numbers (MmGdbusSim *object);
void mm_gdbus_sim_set_emergency_numbers (MmGdbusSim *object, const gchar *const *value);

GVariant *mm_gdbus_sim_get_preferred_networks (MmGdbusSim *object);
GVariant *mm_gdbus_sim_dup_preferred_networks (MmGdbusSim *object);
void mm_gdbus_sim_set_preferred_networks (MmGdbusSim *object, GVariant *value);

GVariant *mm_gdbus_sim_get_gid1 (MmGdbusSim *object);
GVariant *mm_gdbus_sim_dup_gid1 (MmGdbusSim *object);
void mm_gdbus_sim_set_gid1 (MmGdbusSim *object, GVariant *value);

GVariant *mm_gdbus_sim_get_gid2 (MmGdbusSim *object);
GVariant *mm_gdbus_sim_dup_gid2 (MmGdbusSim *object);
void mm_gdbus_sim_set_gid2 (MmGdbusSim *object, GVariant *value);

guint mm_gdbus_sim_get_sim_type (MmGdbusSim *object);
void mm_gdbus_sim_set_sim_type (MmGdbusSim *object, guint value);

guint mm_gdbus_sim_get_esim_status (MmGdbusSim *object);
void mm_gdbus_sim_set_esim_status (MmGdbusSim *object, guint value);

guint mm_gdbus_sim_get_removability (MmGdbusSim *object);
void mm_gdbus_sim_set_removability (MmGdbusSim *object, guint value);


/* ---- */

#define MM_GDBUS_TYPE_SIM_PROXY (mm_gdbus_sim_proxy_get_type ())
#define MM_GDBUS_SIM_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MM_GDBUS_TYPE_SIM_PROXY, MmGdbusSimProxy))
#define MM_GDBUS_SIM_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), MM_GDBUS_TYPE_SIM_PROXY, MmGdbusSimProxyClass))
#define MM_GDBUS_SIM_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), MM_GDBUS_TYPE_SIM_PROXY, MmGdbusSimProxyClass))
#define MM_GDBUS_IS_SIM_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MM_GDBUS_TYPE_SIM_PROXY))
#define MM_GDBUS_IS_SIM_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), MM_GDBUS_TYPE_SIM_PROXY))

typedef struct _MmGdbusSimProxy MmGdbusSimProxy;
typedef struct _MmGdbusSimProxyClass MmGdbusSimProxyClass;
typedef struct _MmGdbusSimProxyPrivate MmGdbusSimProxyPrivate;

struct _MmGdbusSimProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  MmGdbusSimProxyPrivate *priv;
};

struct _MmGdbusSimProxyClass
{
  GDBusProxyClass parent_class;
};

GType mm_gdbus_sim_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MmGdbusSimProxy, g_object_unref)
#endif

void mm_gdbus_sim_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
MmGdbusSim *mm_gdbus_sim_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
MmGdbusSim *mm_gdbus_sim_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void mm_gdbus_sim_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
MmGdbusSim *mm_gdbus_sim_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
MmGdbusSim *mm_gdbus_sim_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define MM_GDBUS_TYPE_SIM_SKELETON (mm_gdbus_sim_skeleton_get_type ())
#define MM_GDBUS_SIM_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MM_GDBUS_TYPE_SIM_SKELETON, MmGdbusSimSkeleton))
#define MM_GDBUS_SIM_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), MM_GDBUS_TYPE_SIM_SKELETON, MmGdbusSimSkeletonClass))
#define MM_GDBUS_SIM_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), MM_GDBUS_TYPE_SIM_SKELETON, MmGdbusSimSkeletonClass))
#define MM_GDBUS_IS_SIM_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MM_GDBUS_TYPE_SIM_SKELETON))
#define MM_GDBUS_IS_SIM_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), MM_GDBUS_TYPE_SIM_SKELETON))

typedef struct _MmGdbusSimSkeleton MmGdbusSimSkeleton;
typedef struct _MmGdbusSimSkeletonClass MmGdbusSimSkeletonClass;
typedef struct _MmGdbusSimSkeletonPrivate MmGdbusSimSkeletonPrivate;

struct _MmGdbusSimSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  MmGdbusSimSkeletonPrivate *priv;
};

struct _MmGdbusSimSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType mm_gdbus_sim_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MmGdbusSimSkeleton, g_object_unref)
#endif

MmGdbusSim *mm_gdbus_sim_skeleton_new (void);


G_END_DECLS

#endif /* __MM_GDBUS_SIM_H__ */
